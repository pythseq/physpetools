{
    "docs": [
        {
            "location": "/", 
            "text": "PhySpeTree: automatically reconstructing phylogenetic species tree\n\n\nPhySpeTree is implemented in Python 2.7, designed for Linux systems.\n\n\nIntroduction\n\n\nUnderstanding phylogenetic relationships between different species is crucial for evolutionary studies. Reconstructing the\nphylogenetic species tree, a branching diagram, is particularly useful in inferring evolutionary relationships. For example,\nthe tree-of-life provides a remarkable view of organizing principles of the biological world. In addition, because new organisms \nare being sequenced, by integrating them to already built species trees, it is important to determine their taxonomic identities. \nMoreover, combining with gain/loss homologous information, species trees are widely applied in predicting new members of \nprotein complexes and protein-protein interactions.\n\n\nHere, we developed an easy-to-use package named PhySpeTree that is convenient to reconstruct species trees by one command line.\nTwo independent pipelines were included by using the most adopted small subunit ribosomal RNA (SSU rRNA) and concatenated highly\nconserved proteins (HCP), respectively. A distinct advantage is that users only need to input species names and PhySpeTree\nautomatically downloads and analyzes sequences of SSU rRNA or HCP from about 4,000 organisms.\n\n\nWorkflow\n\n\n\n\n\n\n\n\n\u2460 Automatic tree reconstruction.\n\n\n\n\n\n\n\u2461 Processing user-defined fasta files for unannotated organisms.\n\n\n\n\n\n\n\u2462 Reconstructing species trees with unannotated organisms.\n\n\n\n\n\n\nFeatures\n\n\n\n\n\n\nInputs only include species names.\n\n\n\n\n\n\nOne command line to build trees.\n\n\n\n\n\n\nHCP and SSU rRNA methods.\n\n\n\n\n\n\nCombine trees.\n\n\n\n\n\n\nView trees with iTOL.\n\n\n\n\n\n\nVersatile software with adjustable parameters.\n\n\n\n\n\n\nModules:\n\n\n\n\nautobuild\n: automatically reconstruct phylogenetic tree\n\n\n\n\nPhySpeTree autobuild -i species_name_list.txt --hcp\n\n\n\n\n\n\nbuild\n: reconstruct phylogenetic tree with manually prepared sequences\n\n\n\n\nPhySpeTree build -i species.fasta -o --hcp\n\n\n\n\n\n\ncombine\n: combine multiple trees\n\n\n\n\nPhySpeTree combine -i multiple_tree.tree -o Output\n\n\n\n\n\n\niview\n: view and annotate trees with iTOL\n\n\n\n\nPhySpeTree iview -i species_name_list.txt -o ivew -range phylum \n\n\n\n\n\n\ncheck\n:check user-defined organisms\n\n\n\n\nPhySpeTree check -i organisms.txt -o checkout --protein", 
            "title": "Home"
        }, 
        {
            "location": "/#physpetree-automatically-reconstructing-phylogenetic-species-tree", 
            "text": "PhySpeTree is implemented in Python 2.7, designed for Linux systems.", 
            "title": "PhySpeTree: automatically reconstructing phylogenetic species tree"
        }, 
        {
            "location": "/#introduction", 
            "text": "Understanding phylogenetic relationships between different species is crucial for evolutionary studies. Reconstructing the\nphylogenetic species tree, a branching diagram, is particularly useful in inferring evolutionary relationships. For example,\nthe tree-of-life provides a remarkable view of organizing principles of the biological world. In addition, because new organisms \nare being sequenced, by integrating them to already built species trees, it is important to determine their taxonomic identities. \nMoreover, combining with gain/loss homologous information, species trees are widely applied in predicting new members of \nprotein complexes and protein-protein interactions.  Here, we developed an easy-to-use package named PhySpeTree that is convenient to reconstruct species trees by one command line.\nTwo independent pipelines were included by using the most adopted small subunit ribosomal RNA (SSU rRNA) and concatenated highly\nconserved proteins (HCP), respectively. A distinct advantage is that users only need to input species names and PhySpeTree\nautomatically downloads and analyzes sequences of SSU rRNA or HCP from about 4,000 organisms.", 
            "title": "Introduction"
        }, 
        {
            "location": "/#workflow", 
            "text": "\u2460 Automatic tree reconstruction.    \u2461 Processing user-defined fasta files for unannotated organisms.    \u2462 Reconstructing species trees with unannotated organisms.", 
            "title": "Workflow"
        }, 
        {
            "location": "/#features", 
            "text": "Inputs only include species names.    One command line to build trees.    HCP and SSU rRNA methods.    Combine trees.    View trees with iTOL.    Versatile software with adjustable parameters.", 
            "title": "Features"
        }, 
        {
            "location": "/#modules", 
            "text": "autobuild : automatically reconstruct phylogenetic tree   PhySpeTree autobuild -i species_name_list.txt --hcp   build : reconstruct phylogenetic tree with manually prepared sequences   PhySpeTree build -i species.fasta -o --hcp   combine : combine multiple trees   PhySpeTree combine -i multiple_tree.tree -o Output   iview : view and annotate trees with iTOL   PhySpeTree iview -i species_name_list.txt -o ivew -range phylum    check :check user-defined organisms   PhySpeTree check -i organisms.txt -o checkout --protein", 
            "title": "Modules:"
        }, 
        {
            "location": "/install/", 
            "text": "Install PhySpeTree in your favorite ways\n\n\n1. PyPI\n\n\n$ pip install PhySpeTree\n\n\n\n\nor \ndownload\n and install:\n\n\n$ pip install PhySpeTree-*.tar.gz\n\n\n\n\nTo upgrade to the latest version:\n\n\n$ pip install --upgrade PhySpeTree\n\n\n\n\n2. GitHub\n\n\n$ git clone git@github.com:yangfangs/physpetools.git\n$ cd physpetools\n$ python setup.py install\n\n\n\n\nor \ndownload\n and install:\n\n\n$ pip install physpetools-*.tar.gz", 
            "title": "Install"
        }, 
        {
            "location": "/install/#install-physpetree-in-your-favorite-ways", 
            "text": "", 
            "title": "Install PhySpeTree in your favorite ways"
        }, 
        {
            "location": "/install/#1-pypi", 
            "text": "$ pip install PhySpeTree  or  download  and install:  $ pip install PhySpeTree-*.tar.gz  To upgrade to the latest version:  $ pip install --upgrade PhySpeTree", 
            "title": "1. PyPI"
        }, 
        {
            "location": "/install/#2-github", 
            "text": "$ git clone git@github.com:yangfangs/physpetools.git\n$ cd physpetools\n$ python setup.py install  or  download  and install:  $ pip install physpetools-*.tar.gz", 
            "title": "2. GitHub"
        }, 
        {
            "location": "/usage/", 
            "text": "Usage and Examples\n\n\nautobuild\n\n\nThe input of \nautobuild\n module is a TXT file containing \nKEGG\n abbreviated species names, for example \norganism_example_list\n.\n\n\n$ PhySpeTree -i autobuild organism_example_list.txt [options]*\n\n\n\n\noptions\n\n\n\n\n\n\n\n\noption\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n-h\n\n\nPrint help message and exits.\n\n\n\n\n\n\n-i\n\n\nInput a TXT file containing abbreviated species names.\n\n\n\n\n\n\n-o\n\n\nA directory to store outputs. The default is \"Outdata\".\n\n\n\n\n\n\n-t\n\n\nNumber of processing threads (CPUs). The default is 1.\n\n\n\n\n\n\n-e\n\n\nFASTA format files to extend the tree with the --ehcp or --esrna option.\n\n\n\n\n\n\n--hcp\n\n\nHCP (highly conserved protein) method (default).\n\n\n\n\n\n\n--ehcp\n\n\nHCP method with extended HCP sequences.\n\n\n\n\n\n\n--srna\n\n\nSSU method.\n\n\n\n\n\n\n--esrna\n\n\nSSU rRNA method with extended SSU rRNA sequences.\n\n\n\n\n\n\n\n\nexample\n\n\nDownload the example input file:\n\n\n$ wget \nhttps://yangfangs.github.io/physpetools/example/organism_example_list.txt\n\n\n--2016-10-29 19:41:53--  https://yangfangs.github.io/physpetools/example/organism_example_list.txt\nResolving yangfangs.github.io (yangfangs.github.io)... 151.101.24.133\nConnecting to yangfangs.github.io (yangfangs.github.io)|151.101.24.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 39 [text/plain]\nSaving to: \u2018organism_example_list.txt\u2019\n\norganism_example_list.txt     100%[==============================================\n]      39  --.-KB/s    in 0s      \n\n2016-10-29 19:41:54 (19.0 MB/s) - \u2018organism_example_list.txt\u2019 saved [39/39]\n\n$ cat organism_example_list.txt\naca\nace\nacl\nacn\naco\nacp\nadg\nadk\naeh\naeq\n\n\n\n\nAutomatically reconstruct species trees by HCP\n\n\n$ PhySpeTree autobuild -i organism_example_list.txt --hcp\nLoading organisms names success.....\n\nThe result are store in:Outdata\n\nNow loading data and constructing phylogenetic tree......\n2016-10-29 19:44:11,660 KEGG INDEX DB INFO: Read organisms names success\n2016-10-29 19:44:17,296 KEGG INDEX DB INFO: Retrieve and download of highly conserved protein 'Ribosomal protein L1' was successful store in p1.fasta file\n2016-10-29 19:44:17,919 KEGG INDEX DB INFO: Retrieve and download of highly conserved protein 'DNA-directed RNA polymerase subunit alpha' was successful store in p2.fasta file\n2016-10-29 19:44:18,369 KEGG INDEX DB INFO: Retrieve and download of highly conserved protein 'Leucyl-tRNA synthetase' was successful store in p3.fasta file\n2016-10-29 19:44:18,943 KEGG INDEX DB INFO: Retrieve and download of highly conserved protein 'Metal-dependent proteases with chaperone activity' was successful store in p4.fasta file\n2016-10-29 19:44:19,660 KEGG INDEX DB INFO: Retrieve and download of highly conserved protein 'Phenylalanine-tRNA synthethase alpha subunit' was successful store in p5.fasta file\n2016-10-29 19:44:20,114 KEGG INDEX DB INFO: Retrieve and download of highly conserved protein 'Predicted GTPase probable translation factor' was successful store in p6.fasta file\n2016-10-29 19:44:20,505 KEGG INDEX DB INFO: Retrieve and download of highly conserved protein 'Ribosomal protein L11' was successful store in p7.fasta file\n2016-10-29 19:44:20,917 KEGG INDEX DB INFO: Retrieve and download of highly conserved protein 'Ribosomal protein L13' was successful store in p8.fasta file\n2016-10-29 19:44:21,333 KEGG INDEX DB INFO: Retrieve and download of highly conserved protein 'Ribosomal protein L14' was successful store in p9.fasta file\n......\n\n\n\n\nOutputs:\n\n\nlog.log\nOutdata/\n        RAxML_bestTree.T1\n        RAxML_bipartitions.T1\n        RAxML_bipartitionsBranchLabels.T1\n        RAxML_bootstrap.T1\n        RAxML_info.T1\n   temp/\n        conserved_protein20161029194411/\n                                       \u3000p1.fasta\n                                       \u3000p2.fasta\n                                       \u3000p3.fasta\n                                       \u3000......\n        alignment20161029194429/\n                                    p1.fasta\n                                    p2.fasta\n                                    p2.fasta\n                                    ......\n        concatenate20161029194432/\n                                  concatenate.fasta\n                                  concatenate.fasta-gb1\n                                  concatenate.fasta-gb1.htm\n                                  concatenate.fasta-gb1.phy\n\n\n\n\n\n\nlog.log\n: logs.\n\n\n\n\nOutdata\n: tree files. \n\n\n\n\nRAxML_bestTree.T1\n: best ML search tree built by RAxML. \n\n\nRAxML_bipartitions.T1\n: bipartition tree built by RAxML.\n\n\nRAxML_bipartitionsBranchLabels.T1\n: bipartition tree by RAxML with branch length.\n\n\nRAxML_bootstrap.T1\n: bootstrap result.\n\n\nRAxML_info.T1\n: logs in running RAxML.\n\n\n\n\n\n\n\n\ntemp\n: temporary data used to check the quality of outputs in each step.\n\n\n\n\nconserved_protein\n: highly conserved proteins retrieved from the KEGG database.\n\n\nalignment\n: aligned sequences.\n\n\n\n\nconcatenate\n: concatenated sequences and conserved blocks.\n\n\n\n\nconcatenate.fasta\n: concatenated HCP sequences.\n\n\nconcatenate.fasta-gb1\n: conserved blocks (by Gblocks).\n\n\nconcatenate.fasta-gb1.htm\n: conserved blocks displayed in html.\n\n\nconcatenate.fasta-gb1.phy\n: conserved blocks in the PHYLIP format.\n\n\n\n\n\n\n\n\n\n\n\n\nAutomatically reconstruct species trees by SSU rRNA\n\n\n$ PhySpeTree autobuild -i organism_example_list.txt --srna\nLoading organisms names success.....\n\nThe result are store in:Outdata\n\nNow loading data and constructing phylogenetic tree......\n2016-10-29 20:12:49,353 SSU rRNA DB INFO: Read organisms names success\n2016-10-29 20:12:54,582 SSU rRNA DB INFO: Retrieve and download of organism 'aca' SSU rRNA sequence was successful\n2016-10-29 20:12:56,831 SSU rRNA DB INFO: Retrieve and download of organism 'ace' SSU rRNA sequence was successful\n2016-10-29 20:12:59,182 SSU rRNA DB INFO: Retrieve and download of organism 'acl' SSU rRNA sequence was successful\n2016-10-29 20:13:01,545 SSU rRNA DB INFO: Retrieve and download of organism 'acn' SSU rRNA sequence was successful\n2016-10-29 20:13:04,096 SSU rRNA DB INFO: Retrieve and download of organism 'aco' SSU rRNA sequence was successful\n2016-10-29 20:13:06,972 SSU rRNA DB INFO: Retrieve and download of organism 'acp' SSU rRNA sequence was successful\n2016-10-29 20:13:09,943 SSU rRNA DB INFO: Retrieve and download of organism 'adg' SSU rRNA sequence was successful\n2016-10-29 20:13:12,707 SSU rRNA DB INFO: Retrieve and download of organism 'adk' SSU rRNA sequence was successful\n2016-10-29 20:13:16,015 SSU rRNA DB INFO: Retrieve and download of organism 'aeh' SSU rRNA sequence was successful\n2016-10-29 20:13:18,969 SSU rRNA DB INFO: Retrieve and download of organism 'aeq' SSU rRNA sequence was successful\n\n\n\n\n\nOutputs:\n\n\nlog.log\nOutdata/\n        RAxML_bestTree.T1\n        RAxML_bipartitions.T1\n        RAxML_bipartitionsBranchLabels.T1\n        RAxML_bootstrap.T1\n        RAxML_info.T1\n   temp/\n        rna_sequence20161029201249/\n                                 rna_sequence.fasta\n\n        rna_alignment20161029201319/\n                                  rna_sequence.fasta\n                                  rna_sequence.fasta-gb1\n                                  rna_sequence.fasta-gb1.htm\n                                  rna_sequence.fasta-gb1.phy\n\n\n\n\n\n\nlog.log\n: logs.\n\n\nOutdata\n: tree files like the HCP method.\n\n\n\n\ntemp\n: temporary data used to check the quality of outputs in each step.\n\n\n\n\nrna_sequence\n: SSU rRNA sequences retrieved from the SILVA database.\n\n\n\n\nrna_alignment\n: aligned sequences and conserved blocks.\n\n\n\n\nrna_sequence.fasta: aligned SSU rRNA sequences.\n\n\nrna_sequence.fasta-gb1: conserved blocks (by Gblocks).\n\n\nrna_sequence.fasta-gb1.htm: conserved blocks displayed in html.\n\n\nrna_sequence.fasta-gb1.phy: conserved blocks in the PHYLIP format.\n\n\n\n\n\n\n\n\n\n\n\n\nAdvanced options\n\n\nAdvanced options of internal software called in PhySpeTree can be set. These options are \nenclosed in single quotes and start with a space\n.\n\n\nHere is an example of setting RAxML advanced options by \n--raxml_p\n:\n\n\n$ PhySpeTree autobuild -i organism_example_list.txt -o test --srna --raxml --raxml_p ' -f a -m GTRGAMMA  -p 12345 -x 12345 -# 100 -n T1'\n\n\n\n\n--muscle\n\n\n\n\nMultiple sequence alignment by MUSCLE (default).\n\n\n\n\n--muscle_p\n\n\n\n\nSet MUSCLE advanced parameters, please see \nMUSCLE Manual\n\n\n\n\nThe default option:\n\n\n\n\n\n\n\n\noption\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\n-maxiter\n\n\nMaximum number of iterations to run. The default is 100.\n\n\n\n\n\n\n\n\n--clustalw\n\n\n\n\nMultiple sequence alignment by ClustalW2.\n\n\n\n\n--clustalw_p\n\n\n\n\nSet ClustalW2 advanced parameters, please see \nClustalw Help\n.\n\n\n\n\n--mafft\n\n\n\n\nMultiple sequence alignment by mafft.\n\n\n\n\n--mafft_p\n\n\n\n\nSet mafft advance parameters. Here use mafft default parameters, please see \nmafft algorithms\n\n\n\n\n--gblocks\n\n\n\n\nTrim by Gblocks.(default)\n\n\n\n\n--gblocks_p\n\n\n\n\nSet Gblocks advanced parameters, please see \nGblocks documentation\n.\n\n\n\n\nThe default option:\n\n\n\n\n\n\n\n\noption\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\n-t\n\n\nChoice type of sequence (default).\n\n\n\n\n\n\n-e\n\n\nGeneric file extension. The default in PhySpeTree is \"-gbl1\".\n\n\n\n\n\n\n\n\n--trimal\n\n\n\n\nTrim by trimal.\n\n\n\n\n--trimal_p\n\n\n\n\nSet trimal advance parameters, please see\ntrimal command line\n\n\n\n\n--ranxml\n\n\n\n\nReconstruct species tree by RAxML (default).\n\n\n\n\n--raxml_p\n\n\n\n\nSet RAxML advanced parameters, please see \nRAxML Manual\n.\n\n\n\n\nThe default option:\n\n\n\n\n\n\n\n\noption\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\n-f\n\n\nselect algorithm. The default in PhySpeTree is \na\n, rapid Bootstrap analysis and search for best\u00adscoring ML tree in one program run.\n\n\n\n\n\n\n-m\n\n\nModel of binary (morphological), nucleotide, multi\u00adState, or amino acid substitution. The PhySpeTree default set is PROTGAMMAJTTX.\n\n\n\n\n\n\n-p\n\n\nSpecify a random number seed for the parsimony inferences. The default in PhySpeTree is 12345.\n\n\n\n\n\n\n-x\n\n\nSpecify an integer number (random seed) and turn on rapid bootstrapping. The default in PhySpeTree is 12345.\n\n\n\n\n\n\n-N\n\n\nThe same with -# specify the number of alternative runs on distinct starting trees. The default in PhySpeTree is 100.\n\n\n\n\n\n\n\n\n--fasttree\n\n\n\n\nReconstruct species tree by FastTree.\n\n\n\n\n--fasttree_p\n\n\n\n\nSet FastTree advanced parameters, please see \nFastTree Helps\n.\n\n\n\n\nbuild\n\n\nThe \nbuild\n module is used to reconstruct species trees with manually prepared sequences. Advanced options are the same as \nautobuild\n module.\n\n\n# HCP method\n$ PhySpeTree build -i example_hcp -o output --hcp\n\n# SSU rRNA method\n$ PhySpeTree build -i example_16s_ssurna.fasta -o output --srna\n\n\n\n\nbuild options\n\n\n\n\n\n\n\n\noption\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n-h\n\n\nPrint help message and exits.\n\n\n\n\n\n\n-i\n\n\nInput a TXT file containing abbreviated species names.\n\n\n\n\n\n\n-o\n\n\nA directory to store outputs. The default is \"Outdata\".\n\n\n\n\n\n\n-t\n\n\nNumber of processing threads (CPUs). The default is 1.\n\n\n\n\n\n\n--hcp\n\n\nHCP method (default).\n\n\n\n\n\n\n--srna\n\n\nSSU rRNA method.\n\n\n\n\n\n\n\n\nexample\n\n\nBuild species trees by manually prepared HCP\n\n\nThe HCP sequences belonging to the same class are prepared in one FASTA format file, and all FASTA format files are stored in the same folder. For example, the folder \nexample_build_hcp\n contains 10 classes of HCP (p1~p10) corresponding to 10 different organisms. There is no limit number of HCP sequences. We recommend no less than 10 highly conserved proteins to ensure the accuracy of the reconstructed phylogenetic tree.\n\n\nDownload and decompress the example input file:\n\n\n\n$ wget \nhttps://yangfangs.github.io/physpetools/example/example_build_hcp.tar.gz\n\n\n--2016-10-29 20:40:41--  https://yangfangs.github.io/physpetools/example/example_build_hcp.tar.gz\nResolving yangfangs.github.io (yangfangs.github.io)... 151.101.48.133\nConnecting to yangfangs.github.io (yangfangs.github.io)|151.101.48.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 17419 (17K) [application/octet-stream]\nSaving to: \u2018example_build_hcp.tar.gz\u2019\n\nexample_build_hcp.tar.gz     100%[==============================================\n]  17.01K  --.-KB/s    in 0.009s  \n\n2016-10-29 20:40:42 (1.92 MB/s) - \u2018example_build_hcp.tar.gz\u2019 saved [17419/17419]\n\n\n$ tar -zxvf example_build_hcp.tar.gz\n\nexample_build_hcp/                                                                                                   \nexample_build_hcp/p1.fasta\nexample_build_hcp/p2.fasta\nexample_build_hcp/p3.fasta\nexample_build_hcp/p4.fasta\nexample_build_hcp/p5.fasta\nexample_build_hcp/p6.fasta\nexample_build_hcp/p7.fasta\nexample_build_hcp/p8.fasta\nexample_build_hcp/p9.fasta\nexample_build_hcp/p10.fasta\n\n\n\n\nCheck HCP:\n\n\n$ cd  example_build_hcp/\n$ cat p1.fasta \n\naeh\nMARLTKRQKAIREKIDPAQQYPVAEALGLLRELPGAKFTESVEVAVNLGVDPRKSDQIVR\nGSTVLPNGTGKTVRVAVFAQGDAAEAAKEAGADIVGMDDLAEQVKGGNLDFDVVVAAPDA\nMGVVGRLGPILGPRGLMPNPKVGTVTPDVAGAVKNAKAGQVRYRTDKGGIIHCAIGKVDF\nEVEALQQNLQALITDLQKLKPANSKGVYLKKVAVSTTMGPGLAVDLASLET\n\nadk\nMAKLTKKQKAQQGKVDSTKLYPFAEAVALVKEAATAKFDESIDVAVQLGVDAKKSDQVVR\nGAVVLPNGTGKTTRVAVFAQGAKAEEAKAAGADVVGMDDLAAQVKAGDMPFDVVIAAPDA\nMRVVGTLGQILGPRGLMPNPKVGTVTPDVATAVKNAKAGQVQFRVDKAGIVHTTIGRRSF\nADDKLQGNLAALIEALNKAKPATSKGVYLRKVAVSSTMGVGVRVDTQSIAA\n\nacp\nMAHVAKKYKAAAEKVDRTKRYKLDEAMSLVKQTATKKFDETVDASINLGVDPKHADQVVR\nGAVVLPHGMGKTVRLAVFAKGDKAKEAQEAGADIVGAEDLAEKIQGGFMDFDKLIATPDM\nMGVVGRLGKILGPRGLMPNPKVGTVTMDLARAVKEQKAGKVEFRVEKAGIVHVPFGKASF\nDPDKLKANFSAIMEVIYKAKPQTAKGVYVKNVTLSTTMGPGIKVDLAELAAQHA\n\nacn\nMSGDGSSYSAEEGIRELLQSAKAKFRESVDVAIKLSVADSKSGESVRGAVVLPKGLGREV\nRVAVFAKGEHAKHASDAGADVVGDEELIEEIKKGRKLDVDWCIATPDFMPQISAIAKILG\nPRGLMPNPKFGTVTLELAKMVGVIKSGQVKFKSDRYGIVHVKIGDVSFTPEDLLENFNAV\nVVAVQNLKPATIKGSYVRGVFVNSTMGRSFRIAGIG\n\nadg\nMPKHGKKYLEAKKQVDRTKLYDPYEALELVKRLASAKFDETVEVAVRLGVDPRHADQQVR\nGAVVLPHGTGKTRRVLVFARGEKAKEAEAAGADYVGAEDLIARIQGGWLDFDVAIATPDM\nMAMVGRIGRILGPRGLMPNPKTGTVTFDVAQAVAEAKAGRVEYRTDKAGIVHAPIGKVSF\nEVEKLVENLKALVDALVRAKPPAAKGQYLRSITVSSTMGPGVKVNPAKLLAS\n\nacl\nMKRGKKYLEAVKLYDKSVAYTGLEAVELAKKTSVAKFDATVEVAFRLNVDPRKADQNLRG\nAISLPHGTGKTVRVVVIAKPEKAKEALAAGALEAGDVELIDKIGKGWFDFDVMVATPDMM\nAQLGKLGRVLGPKGLMPNPKTGTVTLDVAKAVEEIKAGKIEYRTDKVGNIHAPIGKVSFD\nSNKLHENMLAIYNQLVRIKPATVKGTYIKKIALSTTMGPGIMVEENNIKK\n\nace\nMKRGKKYRAAAQLVDRTKLYSPLEAMRLAKQTNTMRVPATVEVAMRLGVDPRKADQMVRG\nTVNLPHGTGKTPRVLVFATAERAEEARAAGADYVGADELIEQVANGFLDFDAVVATPDLM\nGKVGRLGRILGPRGLMPNPKTGTVTNDVAKAVADIKSGKIEFRVDRQANLHLVIGKTDFT\nEQQLVENYAAALDEVLRLKPPTAKGRYLKKVTISTTMGPGIPVDPNRVRNLLAEETAAA\n\naeq\nMTKHGKKYVEAEKQIPAEPVSPLAAMKLLKEISVANFDETVTGDFRLGIDTRQADQQLRG\nTVSLPNGSGKTVRVAVFAEGAAAQAAEEAGADIVGTDELMQQIQAGEFNFDAAVATPDQM\nGKVGRLGKILGPRGLMPNPKLGTVTNDVAKAIKELKGGRVEYRADRYGIAHVVLGKVSFT\nPEQLAENYGAVYDEILRMKPAAAKGKYVKSITVSGTMTPGVSVDSSVTRAYTESAE\n\naca\nMSKKVSKNVAKARAAVEPRPYTLQDAVPLLQQVKFAKFDETVDLTMRLGVDPRHADQMVR\nGTVVLPHGLGKTKKVAVITTGDRQKEAEAAGAEIVGGEELVEKIQKESWTDFDALIATPD\nMMRSVGRLGKVLGPRGLMPNPKTGTVTNDVAAAVKEIKAGKIEYRTDKTALVHVPVGKLS\nFPAEKLIDNAMTVITSVVRAKPSAAKGKYIKGITLSSTMGPGIPLDGSVADAAAKA\n\naco\nMAKKSKRYSEIAAKVDSTKLYGLREAVDLYKEVATAKFDESLEVHIRLGVDPRHADQQVR\nGTIVLPHGTGITKRVLVLAVGEKVKEAEDAGADIVGGDDLIQKISTGWLDFDAVIATPDM\nMKSVGRLGKILGPRGLMPSAKAGTVTFDVADAIKEIKAGRVEFRVDKTAIIHNMVGKKSF\nEAEKLFENLKVLYRAILKARPASAKGTYVRSFYIAPTMGVGIKIDPVAASKEVAEA\n\n\n\n\nReconstruct species tree and store outputs in the \nbuild_hcp_tree\n folder:\n\n\nPhySpeTree build -i example_build_hcp -o build_hcp_tree --hcp\n\n\n\n\nBuild species trees by manually prepared SSU rRNA\n\n\nAll SSU rRNA sequences are prepared in one FASTA format file, for example \nexample_build_srna\n.\n\n\nDownload and decompress the example input file:\n\n\n$ wget \nhttps://yangfangs.github.io/physpetools/example/example_build_srna.fasta\n\n\n--2016-10-29 20:56:31--  https://yangfangs.github.io/physpetools/example/example_build_srna.fasta\nResolving yangfangs.github.io (yangfangs.github.io)... 151.101.48.133\nConnecting to yangfangs.github.io (yangfangs.github.io)|151.101.48.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 14982 (15K) [application/octet-stream]\nSaving to: \u2018example_build_srna.fasta\u2019\n\nexample_build_srna.fasta     100%[==============================================\n]  14.63K  --.-KB/s    in 0.005s  \n\n2016-10-29 20:56:33 (3.14 MB/s) - \u2018example_build_srna.fasta\u2019 saved [14982/14982]\n\n$ grep '\n' example_build_srna.fasta \n\naca\n\nace\n\nacl\n\nacn\n\naco\n\nacp\n\nadg\n\nadk\n\naeh\n\naeq\n\n\n\n\nReconstruct species tree and store outputs in the \nbuild_srna_tree\n folder:\n\n\nPhySpeTree build -i example_build_srna.fasta -o build_srna_tree --srna --fasttree\n\n\n\n\ncombine\n\n\nThe \ncombine\n module is used to combine trees generated from different methods. It contains two steps, at first merge different tree files into the same file. You can use \ncat\n bash command in the Linux system, for example:\n\n\n$ cat tree1.tree tree2.tree \n combineTree.tree\n\n\n\n\nThen, use \ncombine\n:\n\n\n$ PhySpeTree combine -i combineTree.tree [options]*\n\n\n\n\ncombine options\n\n\n\n\n\n\n\n\noption\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n-h\n\n\nPrint help message and exits.\n\n\n\n\n\n\n-i\n\n\nInput PHYLIP format file containing multiple trees.\n\n\n\n\n\n\n-o\n\n\nOutput directory. The default is \"combineTree\".\n\n\n\n\n\n\n--mr\n\n\nMajority rule trees.\n\n\n\n\n\n\n--mre\n\n\nExtended majority rule trees.\n\n\n\n\n\n\n--strict\n\n\nStrict consensus trees.\n\n\n\n\n\n\n\n\nexample\n\n\nexample_combine_tree.tar.gz\n contains \ntree1.tree\n and \ntree2.tree\n reconstructed by the HCP and SSU rRNA method, respectively.\n\n\nDownload and decompress the example input file:\n\n\n\n$ wget \nhttps://yangfangs.github.io/physpetools/example/example_combine_tree.tar.gz\n\n\n--2016-10-30 13:32:06--  https://yangfangs.github.io/physpetools/example/example_combine_tree.tar.gz\nResolving yangfangs.github.io (yangfangs.github.io)... 151.101.48.133\nConnecting to yangfangs.github.io (yangfangs.github.io)|151.101.48.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 661 [application/octet-stream]\nSaving to: \u2018example_combine_tree.tar.gz\u2019\n\nexample_combine_tree.tar.gz  100%[==============================================\n]     661  --.-KB/s    in 0s      \n\n2016-10-30 13:32:07 (380 MB/s) - \u2018example_combine_tree.tar.gz\u2019 saved [661/661] \n\n\n$ tar -zxvf example_combine_tree.tar.gz \nexample_combine_tree/\nexample_combine_tree/tree2.tree\nexample_combine_tree/tree1.tree\n\n\n\n\nMerge \ntree1.tree\n and \ntree2.tree\n:\n\n\n$ cd example_combine_tree/\n$ cat tree1.tree tree2.tree \n combine.tree\n\n\n\n\nCombine trees:\n\n\nPhySpeTree combine -i combine.tree -o combineTree\n\n\n\n\nOutputs:\nupdate PhySpeTree work follow fig\n\n\ncombine/\n        RAxML_info.T1\n        RAxML_MajorityRuleConsensusTree.T1\n\n\n\n\n\n\nRAxML_info.T1\n: logs in running RAxML.\n\n\nRAxML_MajorityRuleConsensusTree.T1\n: the majority rule consensus tree.\n\n\n\n\niview\n\n\nPhySpeTree provides the \niview\n module to annotate taxonomic information (kingdom, phylum, class, or order) of output trees and to generate configure files linked to \niTol\n.\n\n\n$ PhySpeTree iview -i organism_example_list.txt --range\n\n\n\n\niview options\n\n\n\n\n\n\n\n\noption\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n-h\n\n\nPrint help message and exits.\n\n\n\n\n\n\n-i\n\n\nInput a TXT file containing abbreviated species names.\n\n\n\n\n\n\n-o\n\n\nA directory to store outputs. The default is \"iview\".\n\n\n\n\n\n\n-a\n\n\nColored ranges [kingdom, phylum, class or order].\n\n\n\n\n\n\n-r/--range\n\n\nAnnotating labels with ranges by kingdom, phylum, class or order. The default is phylum.\n\n\n\n\n\n\n-c/--color\n\n\nAnnotating labels without ranges by kingdom, phylum, class or order. The default is phylum.\n\n\n\n\n\n\n-l/--labels\n\n\nChange species labels from abbreviated names to full names.\n\n\n\n\n\n\n\n\nexample\n\n\nDownload the example file:\n\n\n$ wget \nhttps://yangfangs.github.io/physpetools/example/organism_example_list.txt\n\n\n--2016-10-30 13:40:48--  https://yangfangs.github.io/physpetools/example/organism_example_list.txt\nResolving yangfangs.github.io (yangfangs.github.io)... 151.101.48.133\nConnecting to yangfangs.github.io (yangfangs.github.io)|151.101.48.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 39 [text/plain]\nSaving to: \u2018organism_example_list.txt\u2019\n\norganism_example_list.txt    100%[==============================================\n]      39  --.-KB/s    in 0s      \n\n2016-10-30 13:40:50 (21.5 MB/s) - \u2018organism_example_list.txt\u2019 saved [39/39]\n\n\n\n\nAnnotate the tree by kingdom\n\n\n$ PhySpeTree iview -i organism_example_list.txt --range -a kingdom\nColor range by kingdom was complete.\n\n\n\n\nThe color range file is store in the \niview\n folder:\n\n\n$ cd iview\n$ cat range_color_by_kingdom.txt \nTREE_COLORS\nSEPARATOR TAB\nDATA\naca     range   #BEBF5A Prokaryotes\nace     range   #BEBF5A Prokaryotes\nacl     range   #BEBF5A Prokaryotes\nacn     range   #BEBF5A Prokaryotes\naco     range   #BEBF5A Prokaryotes\nacp     range   #BEBF5A Prokaryotes\nadg     range   #BEBF5A Prokaryotes\nadk     range   #BEBF5A Prokaryotes\naeh     range   #BEBF5A Prokaryotes\naeq     range   #BEBF5A Prokaryotes\n\n\n\n\nAnnotate the tree by phylum\n\n\n$ PhySpeTree iview -i organism_example_list.txt --range -a phylum\nColor range by phylum was complete.\n\n\n\n\nThe color range file is store in the \niview\n folder:\n\n\n$ cd iview\n$ cat range_color_by_phylum.txt \nTREE_COLORS\nSEPARATOR TAB\nDATA\naca     range   #865142 Bacteria\nace     range   #865142 Bacteria\nacl     range   #865142 Bacteria\nacn     range   #865142 Bacteria\naco     range   #865142 Bacteria\nacp     range   #865142 Bacteria\nadg     range   #865142 Bacteria\nadk     range   #865142 Bacteria\naeh     range   #865142 Bacteria\naeq     range   #865142 Bacteria\n\n\n\n\nAnnotate the tree by class\n\n\n$ PhySpeTree iview -i organism_example_list.txt --range -a class\nColor range by class was complete.\n\n\n\n\nThe color range file is store in the \niview\n folder:\n\n\n$ cd iview\n$ cat range_color_by_class.txt \nTREE_COLORS\nSEPARATOR TAB\nDATA\naca     range   #9AB7F3 Acidobacteria\nace     range   #99D1DB Actinobacteria\nacl     range   #A5E58D Tenericutes\nacn     range   #94F1C1 Alphaproteobacteria\naco     range   #D67A21 Synergistetes\nacp     range   #DD9284 Deltaproteobacteria\nadg     range   #3E70B8 Firmicutes - Clostridia\nadk     range   #DDC8B7 Betaproteobacteria\naeh     range   #72E137 Gammaproteobacteria - Others\naeq     range   #99D1DB Actinobacteria\n\n\n\n\nAnnotate the tree by order\n\n\n$ PhySpeTree iview -i organism_example_list.txt --range -a order\nColor range by order was complete.\n\n\n\n\nThe color range file is store in the \niview\n folder:\n\n\n$ cd iview\n$ cat range_color_by_order.txt \nTREE_COLORS\nSEPARATOR TAB\nDATA\naca     range   #AA8761 Acidobacterium\nace     range   #8770BC Acidothermus\nacl     range   #3BD26B Acholeplasma\nacn     range   #D1B487 Anaplasma\naco     range   #D96D21 Aminobacterium\nacp     range   #AC4E16 Anaeromyxobacter\nadg     range   #287AD8 Ammonifex\nadk     range   #C8184E Alicycliphilus\naeh     range   #57A569 Alkalilimnicola\naeq     range   #F1A2B7 Adlercreutzia\n\n\n\n\ncheck\n\n\nThe \ncheck\n module is used to check whether input organisms are in pre-built databases.\n\n\n$ PhySpeTree check -i organism_example_list.txt --ehcp\n\n\n\n\ncheck options\n\n\n\n\n\n\n\n\noption\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n-h\n\n\nPrint help message and exits.\n\n\n\n\n\n\n-i\n\n\nInput a TXT file containing abbreviated species names.\n\n\n\n\n\n\n-o\n\n\nA directory to store outputs. The default is \"check\".\n\n\n\n\n\n\n--hcp\n\n\nCheck whether organisms are supported in the KEGG database.\n\n\n\n\n\n\n--ehcp\n\n\nCheck input organisms prepare for extend autobuild tree module.\n\n\n\n\n\n\n--srna\n\n\nCheck whether organisms are supported in the SILVA database.\n\n\n\n\n\n\n\n\nexample\n\n\nCheck extended organisms in \nautobuild\n\n\nDetermine proteins to be prepared in the \nautobuild\n module with the \n--ehcp\n option, for example, \norganism_example_list.txt\n\n\nDownload the example file:\n\n\n$ wget \nhttps://yangfangs.github.io/physpetools/example/organism_example_list.txt\n\n\n--2016-10-30 13:40:48--  https://yangfangs.github.io/physpetools/example/organism_example_list.txt\nResolving yangfangs.github.io (yangfangs.github.io)... 151.101.48.133\nConnecting to yangfangs.github.io (yangfangs.github.io)|151.101.48.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 39 [text/plain]\nSaving to: \u2018organism_example_list.txt\u2019\n\norganism_example_list.txt    100%[==============================================\n]      39  --.-KB/s    in 0s      \n\n2016-10-30 13:40:50 (21.5 MB/s) - \u2018organism_example_list.txt\u2019 saved [39/39]\n\n\n\n\nCheck: \n\n\n$ PhySpeTree check -i organism_example_list.txt --ehcp\n\n'Ribosomal protein L1' ----------------------------------\n p1.fasta\n\n'DNA-directed RNA polymerase subunit alpha' ----------------------------------\n p2.fasta\n\n'Leucyl-tRNA synthetase' ----------------------------------\n p3.fasta\n\n'Metal-dependent proteases with chaperone activity' ----------------------------------\n p4.fasta\n\n'Phenylalanine-tRNA synthethase alpha subunit' ----------------------------------\n p5.fasta\n\n'Predicted GTPase probable translation factor' ----------------------------------\n p6.fasta\n\n'Ribosomal protein L11' ----------------------------------\n p7.fasta\n\n'Ribosomal protein L13' ----------------------------------\n p8.fasta\n\n'Ribosomal protein L14' ----------------------------------\n p9.fasta\n\n'Ribosomal protein L22' ----------------------------------\n p10.fasta\n\n'Ribosomal protein L3' ----------------------------------\n p11.fasta\n\n'Ribosomal protein L5' ----------------------------------\n p12.fasta\n\n'Ribosomal protein S11' ----------------------------------\n p13.fasta\n\n'Ribosomal protein S17' ----------------------------------\n p14.fasta\n\n'Ribosomal protein S2' ----------------------------------\n p15.fasta\n\n'Ribosomal protein S3' ----------------------------------\n p16.fasta\n\n'Ribosomal protein S4' ----------------------------------\n p17.fasta\n\n'Ribosomal protein S5' ----------------------------------\n p18.fasta\n\n'Ribosomal protein S7' ----------------------------------\n p19.fasta\n\n'Ribosomal protein S8' ----------------------------------\n p20.fasta\n\n'Ribosomal protein S9' ----------------------------------\n p21.fasta\n\n'Seryl-tRNA synthetase' ----------------------------------\n p22.fasta\n\n'Arginyl-tRNA synthetase' ----------------------------------\n p23.fasta\n\n'DNA-directed RNA polymerase beta subunit' ----------------------------------\n p24.fasta\n\n'Ribosomal protein S13' ----------------------------------\n p25.fasta\n\nCheck extend highly conserved protein is completed.\n\n\n\n\n\nThe check result is stored in the \ncheck\n folder. In \nphyspe_echp_extend.txt\n file indicates class of HCP and their corresponding names, which will be used to prepare extended HCP sequences.\n\n\n$ cd check\n$ cat physpe_echp_extend.txt \n'Ribosomal protein L1' ----------------------------------\n p1.fasta\n'DNA-directed RNA polymerase subunit alpha' ----------------------------------\n p2.fasta\n'Leucyl-tRNA synthetase' ----------------------------------\n p3.fasta\n'Metal-dependent proteases with chaperone activity' ----------------------------------\n p4.fasta\n'Phenylalanine-tRNA synthethase alpha subunit' ----------------------------------\n p5.fasta\n'Predicted GTPase probable translation factor' ----------------------------------\n p6.fasta\n'Ribosomal protein L11' ----------------------------------\n p7.fasta\n'Ribosomal protein L13' ----------------------------------\n p8.fasta\n'Ribosomal protein L14' ----------------------------------\n p9.fasta\n'Ribosomal protein L22' ----------------------------------\n p10.fasta\n'Ribosomal protein L3' ----------------------------------\n p11.fasta\n'Ribosomal protein L5' ----------------------------------\n p12.fasta\n'Ribosomal protein S11' ----------------------------------\n p13.fasta\n'Ribosomal protein S17' ----------------------------------\n p14.fasta\n'Ribosomal protein S2' ----------------------------------\n p15.fasta\n'Ribosomal protein S3' ----------------------------------\n p16.fasta\n'Ribosomal protein S4' ----------------------------------\n p17.fasta\n'Ribosomal protein S5' ----------------------------------\n p18.fasta\n'Ribosomal protein S7' ----------------------------------\n p19.fasta\n'Ribosomal protein S8' ----------------------------------\n p20.fasta\n'Ribosomal protein S9' ----------------------------------\n p21.fasta\n'Seryl-tRNA synthetase' ----------------------------------\n p22.fasta\n'Arginyl-tRNA synthetase' ----------------------------------\n p23.fasta\n'DNA-directed RNA polymerase beta subunit' ----------------------------------\n p24.fasta\n'Ribosomal protein S13' ----------------------------------\n p25.fasta\n\n\n\n\nCheck whether input organisms are supported in PhySpeTree\n\n\nCheck whether input species are supported by the KEGG database when using the \n--hcp\n method, for example \nexample download\n.\n\n\nDownload the example file:\n\n\n$ wget \nhttps://yangfangs.github.io/physpetools/example/191speciesnames.txt\n\n\n--2016-10-30 14:48:21--  https://yangfangs.github.io/physpetools/example/191speciesnames.txt\nResolving yangfangs.github.io (yangfangs.github.io)... 151.101.48.133\nConnecting to yangfangs.github.io (yangfangs.github.io)|151.101.48.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 773 [text/plain]\nSaving to: \u2018191speciesnames.txt\u2019\n\n191speciesnames.txt          100%[==============================================\n]     773  --.-KB/s    in 0s      \n\n2016-10-30 14:48:22 (322 MB/s) - \u2018191speciesnames.txt\u2019 saved [773/773]\n\n\n\n\nThe check results show one organism named 'ges' is not supported in PhySpeTree:\n\n\n$ PhySpeTree check -i 191speciesnames.txt --hcp\nWARNING: The following species are not supported by KEGG DATABASE:\nges\nChecked  whether the input species names in KEGG DATABASE completed.\n\n\n\n\nCheck whether input species are supported by SILVA database when using the \n--srna\n metho, for example \nexample download\n\n\nDownload the example file:\n\n\n$ wget \nhttps://yangfangs.github.io/physpetools/example/191speciesnames.txt\n\n\n--2016-10-30 14:48:21--  https://yangfangs.github.io/physpetools/example/191speciesnames.txt\nResolving yangfangs.github.io (yangfangs.github.io)... 151.101.48.133\nConnecting to yangfangs.github.io (yangfangs.github.io)|151.101.48.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 773 [text/plain]\nSaving to: \u2018191speciesnames.txt\u2019\n\n191speciesnames.txt          100%[==============================================\n]     773  --.-KB/s    in 0s      \n\n2016-10-30 14:48:22 (322 MB/s) - \u2018191speciesnames.txt\u2019 saved [773/773]\n\n\n\n\nThe check results show 28 organisms are not supported in PhySpeTree:\n\n\n\n(progect) [yangfang@localhost test_check] $ PhySpeTree check -i 191speciesnames.txt --srna\nWARNING: The following species are not supported by SILVA DATABASE:\nneq\nape\ntac\nmmp\ngla\ntps\ncho\nddi\nspo\naga\ntru\nmpu\nlin\nban\nbce\nljo\nsan\nspg\nges\nlis\nsco\ncdi\nmle\nwsu\nrpr\nbpe\nbpa\nppr\nChecked  whether the input species names in SILVA DATABASE completed.\n\n\n\n\nFor organisms not in the pre-built list, PhySpeTree provides extend options (\n--echp\n or \n--esrna\n) to insert manually prepared sequences.", 
            "title": "Usage"
        }, 
        {
            "location": "/usage/#usage-and-examples", 
            "text": "", 
            "title": "Usage and Examples"
        }, 
        {
            "location": "/usage/#autobuild", 
            "text": "The input of  autobuild  module is a TXT file containing  KEGG  abbreviated species names, for example  organism_example_list .  $ PhySpeTree -i autobuild organism_example_list.txt [options]*", 
            "title": "autobuild"
        }, 
        {
            "location": "/usage/#options", 
            "text": "option  Description      -h  Print help message and exits.    -i  Input a TXT file containing abbreviated species names.    -o  A directory to store outputs. The default is \"Outdata\".    -t  Number of processing threads (CPUs). The default is 1.    -e  FASTA format files to extend the tree with the --ehcp or --esrna option.    --hcp  HCP (highly conserved protein) method (default).    --ehcp  HCP method with extended HCP sequences.    --srna  SSU method.    --esrna  SSU rRNA method with extended SSU rRNA sequences.", 
            "title": "options"
        }, 
        {
            "location": "/usage/#example", 
            "text": "Download the example input file:  $ wget  https://yangfangs.github.io/physpetools/example/organism_example_list.txt \n\n--2016-10-29 19:41:53--  https://yangfangs.github.io/physpetools/example/organism_example_list.txt\nResolving yangfangs.github.io (yangfangs.github.io)... 151.101.24.133\nConnecting to yangfangs.github.io (yangfangs.github.io)|151.101.24.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 39 [text/plain]\nSaving to: \u2018organism_example_list.txt\u2019\n\norganism_example_list.txt     100%[============================================== ]      39  --.-KB/s    in 0s      \n\n2016-10-29 19:41:54 (19.0 MB/s) - \u2018organism_example_list.txt\u2019 saved [39/39]\n\n$ cat organism_example_list.txt\naca\nace\nacl\nacn\naco\nacp\nadg\nadk\naeh\naeq  Automatically reconstruct species trees by HCP  $ PhySpeTree autobuild -i organism_example_list.txt --hcp\nLoading organisms names success.....\n\nThe result are store in:Outdata\n\nNow loading data and constructing phylogenetic tree......\n2016-10-29 19:44:11,660 KEGG INDEX DB INFO: Read organisms names success\n2016-10-29 19:44:17,296 KEGG INDEX DB INFO: Retrieve and download of highly conserved protein 'Ribosomal protein L1' was successful store in p1.fasta file\n2016-10-29 19:44:17,919 KEGG INDEX DB INFO: Retrieve and download of highly conserved protein 'DNA-directed RNA polymerase subunit alpha' was successful store in p2.fasta file\n2016-10-29 19:44:18,369 KEGG INDEX DB INFO: Retrieve and download of highly conserved protein 'Leucyl-tRNA synthetase' was successful store in p3.fasta file\n2016-10-29 19:44:18,943 KEGG INDEX DB INFO: Retrieve and download of highly conserved protein 'Metal-dependent proteases with chaperone activity' was successful store in p4.fasta file\n2016-10-29 19:44:19,660 KEGG INDEX DB INFO: Retrieve and download of highly conserved protein 'Phenylalanine-tRNA synthethase alpha subunit' was successful store in p5.fasta file\n2016-10-29 19:44:20,114 KEGG INDEX DB INFO: Retrieve and download of highly conserved protein 'Predicted GTPase probable translation factor' was successful store in p6.fasta file\n2016-10-29 19:44:20,505 KEGG INDEX DB INFO: Retrieve and download of highly conserved protein 'Ribosomal protein L11' was successful store in p7.fasta file\n2016-10-29 19:44:20,917 KEGG INDEX DB INFO: Retrieve and download of highly conserved protein 'Ribosomal protein L13' was successful store in p8.fasta file\n2016-10-29 19:44:21,333 KEGG INDEX DB INFO: Retrieve and download of highly conserved protein 'Ribosomal protein L14' was successful store in p9.fasta file\n......  Outputs:  log.log\nOutdata/\n        RAxML_bestTree.T1\n        RAxML_bipartitions.T1\n        RAxML_bipartitionsBranchLabels.T1\n        RAxML_bootstrap.T1\n        RAxML_info.T1\n   temp/\n        conserved_protein20161029194411/\n                                       \u3000p1.fasta\n                                       \u3000p2.fasta\n                                       \u3000p3.fasta\n                                       \u3000......\n        alignment20161029194429/\n                                    p1.fasta\n                                    p2.fasta\n                                    p2.fasta\n                                    ......\n        concatenate20161029194432/\n                                  concatenate.fasta\n                                  concatenate.fasta-gb1\n                                  concatenate.fasta-gb1.htm\n                                  concatenate.fasta-gb1.phy   log.log : logs.   Outdata : tree files.    RAxML_bestTree.T1 : best ML search tree built by RAxML.   RAxML_bipartitions.T1 : bipartition tree built by RAxML.  RAxML_bipartitionsBranchLabels.T1 : bipartition tree by RAxML with branch length.  RAxML_bootstrap.T1 : bootstrap result.  RAxML_info.T1 : logs in running RAxML.     temp : temporary data used to check the quality of outputs in each step.   conserved_protein : highly conserved proteins retrieved from the KEGG database.  alignment : aligned sequences.   concatenate : concatenated sequences and conserved blocks.   concatenate.fasta : concatenated HCP sequences.  concatenate.fasta-gb1 : conserved blocks (by Gblocks).  concatenate.fasta-gb1.htm : conserved blocks displayed in html.  concatenate.fasta-gb1.phy : conserved blocks in the PHYLIP format.       Automatically reconstruct species trees by SSU rRNA  $ PhySpeTree autobuild -i organism_example_list.txt --srna\nLoading organisms names success.....\n\nThe result are store in:Outdata\n\nNow loading data and constructing phylogenetic tree......\n2016-10-29 20:12:49,353 SSU rRNA DB INFO: Read organisms names success\n2016-10-29 20:12:54,582 SSU rRNA DB INFO: Retrieve and download of organism 'aca' SSU rRNA sequence was successful\n2016-10-29 20:12:56,831 SSU rRNA DB INFO: Retrieve and download of organism 'ace' SSU rRNA sequence was successful\n2016-10-29 20:12:59,182 SSU rRNA DB INFO: Retrieve and download of organism 'acl' SSU rRNA sequence was successful\n2016-10-29 20:13:01,545 SSU rRNA DB INFO: Retrieve and download of organism 'acn' SSU rRNA sequence was successful\n2016-10-29 20:13:04,096 SSU rRNA DB INFO: Retrieve and download of organism 'aco' SSU rRNA sequence was successful\n2016-10-29 20:13:06,972 SSU rRNA DB INFO: Retrieve and download of organism 'acp' SSU rRNA sequence was successful\n2016-10-29 20:13:09,943 SSU rRNA DB INFO: Retrieve and download of organism 'adg' SSU rRNA sequence was successful\n2016-10-29 20:13:12,707 SSU rRNA DB INFO: Retrieve and download of organism 'adk' SSU rRNA sequence was successful\n2016-10-29 20:13:16,015 SSU rRNA DB INFO: Retrieve and download of organism 'aeh' SSU rRNA sequence was successful\n2016-10-29 20:13:18,969 SSU rRNA DB INFO: Retrieve and download of organism 'aeq' SSU rRNA sequence was successful  Outputs:  log.log\nOutdata/\n        RAxML_bestTree.T1\n        RAxML_bipartitions.T1\n        RAxML_bipartitionsBranchLabels.T1\n        RAxML_bootstrap.T1\n        RAxML_info.T1\n   temp/\n        rna_sequence20161029201249/\n                                 rna_sequence.fasta\n\n        rna_alignment20161029201319/\n                                  rna_sequence.fasta\n                                  rna_sequence.fasta-gb1\n                                  rna_sequence.fasta-gb1.htm\n                                  rna_sequence.fasta-gb1.phy   log.log : logs.  Outdata : tree files like the HCP method.   temp : temporary data used to check the quality of outputs in each step.   rna_sequence : SSU rRNA sequences retrieved from the SILVA database.   rna_alignment : aligned sequences and conserved blocks.   rna_sequence.fasta: aligned SSU rRNA sequences.  rna_sequence.fasta-gb1: conserved blocks (by Gblocks).  rna_sequence.fasta-gb1.htm: conserved blocks displayed in html.  rna_sequence.fasta-gb1.phy: conserved blocks in the PHYLIP format.", 
            "title": "example"
        }, 
        {
            "location": "/usage/#advanced-options", 
            "text": "Advanced options of internal software called in PhySpeTree can be set. These options are  enclosed in single quotes and start with a space .  Here is an example of setting RAxML advanced options by  --raxml_p :  $ PhySpeTree autobuild -i organism_example_list.txt -o test --srna --raxml --raxml_p ' -f a -m GTRGAMMA  -p 12345 -x 12345 -# 100 -n T1'  --muscle   Multiple sequence alignment by MUSCLE (default).   --muscle_p   Set MUSCLE advanced parameters, please see  MUSCLE Manual   The default option:     option  description      -maxiter  Maximum number of iterations to run. The default is 100.     --clustalw   Multiple sequence alignment by ClustalW2.   --clustalw_p   Set ClustalW2 advanced parameters, please see  Clustalw Help .   --mafft   Multiple sequence alignment by mafft.   --mafft_p   Set mafft advance parameters. Here use mafft default parameters, please see  mafft algorithms   --gblocks   Trim by Gblocks.(default)   --gblocks_p   Set Gblocks advanced parameters, please see  Gblocks documentation .   The default option:     option  description      -t  Choice type of sequence (default).    -e  Generic file extension. The default in PhySpeTree is \"-gbl1\".     --trimal   Trim by trimal.   --trimal_p   Set trimal advance parameters, please see trimal command line   --ranxml   Reconstruct species tree by RAxML (default).   --raxml_p   Set RAxML advanced parameters, please see  RAxML Manual .   The default option:     option  description      -f  select algorithm. The default in PhySpeTree is  a , rapid Bootstrap analysis and search for best\u00adscoring ML tree in one program run.    -m  Model of binary (morphological), nucleotide, multi\u00adState, or amino acid substitution. The PhySpeTree default set is PROTGAMMAJTTX.    -p  Specify a random number seed for the parsimony inferences. The default in PhySpeTree is 12345.    -x  Specify an integer number (random seed) and turn on rapid bootstrapping. The default in PhySpeTree is 12345.    -N  The same with -# specify the number of alternative runs on distinct starting trees. The default in PhySpeTree is 100.     --fasttree   Reconstruct species tree by FastTree.   --fasttree_p   Set FastTree advanced parameters, please see  FastTree Helps .", 
            "title": "Advanced options"
        }, 
        {
            "location": "/usage/#build", 
            "text": "The  build  module is used to reconstruct species trees with manually prepared sequences. Advanced options are the same as  autobuild  module.  # HCP method\n$ PhySpeTree build -i example_hcp -o output --hcp\n\n# SSU rRNA method\n$ PhySpeTree build -i example_16s_ssurna.fasta -o output --srna", 
            "title": "build"
        }, 
        {
            "location": "/usage/#build-options", 
            "text": "option  Description      -h  Print help message and exits.    -i  Input a TXT file containing abbreviated species names.    -o  A directory to store outputs. The default is \"Outdata\".    -t  Number of processing threads (CPUs). The default is 1.    --hcp  HCP method (default).    --srna  SSU rRNA method.", 
            "title": "build options"
        }, 
        {
            "location": "/usage/#example_1", 
            "text": "Build species trees by manually prepared HCP  The HCP sequences belonging to the same class are prepared in one FASTA format file, and all FASTA format files are stored in the same folder. For example, the folder  example_build_hcp  contains 10 classes of HCP (p1~p10) corresponding to 10 different organisms. There is no limit number of HCP sequences. We recommend no less than 10 highly conserved proteins to ensure the accuracy of the reconstructed phylogenetic tree.  Download and decompress the example input file:  \n$ wget  https://yangfangs.github.io/physpetools/example/example_build_hcp.tar.gz \n\n--2016-10-29 20:40:41--  https://yangfangs.github.io/physpetools/example/example_build_hcp.tar.gz\nResolving yangfangs.github.io (yangfangs.github.io)... 151.101.48.133\nConnecting to yangfangs.github.io (yangfangs.github.io)|151.101.48.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 17419 (17K) [application/octet-stream]\nSaving to: \u2018example_build_hcp.tar.gz\u2019\n\nexample_build_hcp.tar.gz     100%[============================================== ]  17.01K  --.-KB/s    in 0.009s  \n\n2016-10-29 20:40:42 (1.92 MB/s) - \u2018example_build_hcp.tar.gz\u2019 saved [17419/17419]\n\n\n$ tar -zxvf example_build_hcp.tar.gz\n\nexample_build_hcp/                                                                                                   \nexample_build_hcp/p1.fasta\nexample_build_hcp/p2.fasta\nexample_build_hcp/p3.fasta\nexample_build_hcp/p4.fasta\nexample_build_hcp/p5.fasta\nexample_build_hcp/p6.fasta\nexample_build_hcp/p7.fasta\nexample_build_hcp/p8.fasta\nexample_build_hcp/p9.fasta\nexample_build_hcp/p10.fasta  Check HCP:  $ cd  example_build_hcp/\n$ cat p1.fasta  aeh\nMARLTKRQKAIREKIDPAQQYPVAEALGLLRELPGAKFTESVEVAVNLGVDPRKSDQIVR\nGSTVLPNGTGKTVRVAVFAQGDAAEAAKEAGADIVGMDDLAEQVKGGNLDFDVVVAAPDA\nMGVVGRLGPILGPRGLMPNPKVGTVTPDVAGAVKNAKAGQVRYRTDKGGIIHCAIGKVDF\nEVEALQQNLQALITDLQKLKPANSKGVYLKKVAVSTTMGPGLAVDLASLET adk\nMAKLTKKQKAQQGKVDSTKLYPFAEAVALVKEAATAKFDESIDVAVQLGVDAKKSDQVVR\nGAVVLPNGTGKTTRVAVFAQGAKAEEAKAAGADVVGMDDLAAQVKAGDMPFDVVIAAPDA\nMRVVGTLGQILGPRGLMPNPKVGTVTPDVATAVKNAKAGQVQFRVDKAGIVHTTIGRRSF\nADDKLQGNLAALIEALNKAKPATSKGVYLRKVAVSSTMGVGVRVDTQSIAA acp\nMAHVAKKYKAAAEKVDRTKRYKLDEAMSLVKQTATKKFDETVDASINLGVDPKHADQVVR\nGAVVLPHGMGKTVRLAVFAKGDKAKEAQEAGADIVGAEDLAEKIQGGFMDFDKLIATPDM\nMGVVGRLGKILGPRGLMPNPKVGTVTMDLARAVKEQKAGKVEFRVEKAGIVHVPFGKASF\nDPDKLKANFSAIMEVIYKAKPQTAKGVYVKNVTLSTTMGPGIKVDLAELAAQHA acn\nMSGDGSSYSAEEGIRELLQSAKAKFRESVDVAIKLSVADSKSGESVRGAVVLPKGLGREV\nRVAVFAKGEHAKHASDAGADVVGDEELIEEIKKGRKLDVDWCIATPDFMPQISAIAKILG\nPRGLMPNPKFGTVTLELAKMVGVIKSGQVKFKSDRYGIVHVKIGDVSFTPEDLLENFNAV\nVVAVQNLKPATIKGSYVRGVFVNSTMGRSFRIAGIG adg\nMPKHGKKYLEAKKQVDRTKLYDPYEALELVKRLASAKFDETVEVAVRLGVDPRHADQQVR\nGAVVLPHGTGKTRRVLVFARGEKAKEAEAAGADYVGAEDLIARIQGGWLDFDVAIATPDM\nMAMVGRIGRILGPRGLMPNPKTGTVTFDVAQAVAEAKAGRVEYRTDKAGIVHAPIGKVSF\nEVEKLVENLKALVDALVRAKPPAAKGQYLRSITVSSTMGPGVKVNPAKLLAS acl\nMKRGKKYLEAVKLYDKSVAYTGLEAVELAKKTSVAKFDATVEVAFRLNVDPRKADQNLRG\nAISLPHGTGKTVRVVVIAKPEKAKEALAAGALEAGDVELIDKIGKGWFDFDVMVATPDMM\nAQLGKLGRVLGPKGLMPNPKTGTVTLDVAKAVEEIKAGKIEYRTDKVGNIHAPIGKVSFD\nSNKLHENMLAIYNQLVRIKPATVKGTYIKKIALSTTMGPGIMVEENNIKK ace\nMKRGKKYRAAAQLVDRTKLYSPLEAMRLAKQTNTMRVPATVEVAMRLGVDPRKADQMVRG\nTVNLPHGTGKTPRVLVFATAERAEEARAAGADYVGADELIEQVANGFLDFDAVVATPDLM\nGKVGRLGRILGPRGLMPNPKTGTVTNDVAKAVADIKSGKIEFRVDRQANLHLVIGKTDFT\nEQQLVENYAAALDEVLRLKPPTAKGRYLKKVTISTTMGPGIPVDPNRVRNLLAEETAAA aeq\nMTKHGKKYVEAEKQIPAEPVSPLAAMKLLKEISVANFDETVTGDFRLGIDTRQADQQLRG\nTVSLPNGSGKTVRVAVFAEGAAAQAAEEAGADIVGTDELMQQIQAGEFNFDAAVATPDQM\nGKVGRLGKILGPRGLMPNPKLGTVTNDVAKAIKELKGGRVEYRADRYGIAHVVLGKVSFT\nPEQLAENYGAVYDEILRMKPAAAKGKYVKSITVSGTMTPGVSVDSSVTRAYTESAE aca\nMSKKVSKNVAKARAAVEPRPYTLQDAVPLLQQVKFAKFDETVDLTMRLGVDPRHADQMVR\nGTVVLPHGLGKTKKVAVITTGDRQKEAEAAGAEIVGGEELVEKIQKESWTDFDALIATPD\nMMRSVGRLGKVLGPRGLMPNPKTGTVTNDVAAAVKEIKAGKIEYRTDKTALVHVPVGKLS\nFPAEKLIDNAMTVITSVVRAKPSAAKGKYIKGITLSSTMGPGIPLDGSVADAAAKA aco\nMAKKSKRYSEIAAKVDSTKLYGLREAVDLYKEVATAKFDESLEVHIRLGVDPRHADQQVR\nGTIVLPHGTGITKRVLVLAVGEKVKEAEDAGADIVGGDDLIQKISTGWLDFDAVIATPDM\nMKSVGRLGKILGPRGLMPSAKAGTVTFDVADAIKEIKAGRVEFRVDKTAIIHNMVGKKSF\nEAEKLFENLKVLYRAILKARPASAKGTYVRSFYIAPTMGVGIKIDPVAASKEVAEA  Reconstruct species tree and store outputs in the  build_hcp_tree  folder:  PhySpeTree build -i example_build_hcp -o build_hcp_tree --hcp  Build species trees by manually prepared SSU rRNA  All SSU rRNA sequences are prepared in one FASTA format file, for example  example_build_srna .  Download and decompress the example input file:  $ wget  https://yangfangs.github.io/physpetools/example/example_build_srna.fasta \n\n--2016-10-29 20:56:31--  https://yangfangs.github.io/physpetools/example/example_build_srna.fasta\nResolving yangfangs.github.io (yangfangs.github.io)... 151.101.48.133\nConnecting to yangfangs.github.io (yangfangs.github.io)|151.101.48.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 14982 (15K) [application/octet-stream]\nSaving to: \u2018example_build_srna.fasta\u2019\n\nexample_build_srna.fasta     100%[============================================== ]  14.63K  --.-KB/s    in 0.005s  \n\n2016-10-29 20:56:33 (3.14 MB/s) - \u2018example_build_srna.fasta\u2019 saved [14982/14982]\n\n$ grep ' ' example_build_srna.fasta  aca ace acl acn aco acp adg adk aeh aeq  Reconstruct species tree and store outputs in the  build_srna_tree  folder:  PhySpeTree build -i example_build_srna.fasta -o build_srna_tree --srna --fasttree", 
            "title": "example"
        }, 
        {
            "location": "/usage/#combine", 
            "text": "The  combine  module is used to combine trees generated from different methods. It contains two steps, at first merge different tree files into the same file. You can use  cat  bash command in the Linux system, for example:  $ cat tree1.tree tree2.tree   combineTree.tree  Then, use  combine :  $ PhySpeTree combine -i combineTree.tree [options]*", 
            "title": "combine"
        }, 
        {
            "location": "/usage/#combine-options", 
            "text": "option  Description      -h  Print help message and exits.    -i  Input PHYLIP format file containing multiple trees.    -o  Output directory. The default is \"combineTree\".    --mr  Majority rule trees.    --mre  Extended majority rule trees.    --strict  Strict consensus trees.", 
            "title": "combine options"
        }, 
        {
            "location": "/usage/#example_2", 
            "text": "example_combine_tree.tar.gz  contains  tree1.tree  and  tree2.tree  reconstructed by the HCP and SSU rRNA method, respectively.  Download and decompress the example input file:  \n$ wget  https://yangfangs.github.io/physpetools/example/example_combine_tree.tar.gz \n\n--2016-10-30 13:32:06--  https://yangfangs.github.io/physpetools/example/example_combine_tree.tar.gz\nResolving yangfangs.github.io (yangfangs.github.io)... 151.101.48.133\nConnecting to yangfangs.github.io (yangfangs.github.io)|151.101.48.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 661 [application/octet-stream]\nSaving to: \u2018example_combine_tree.tar.gz\u2019\n\nexample_combine_tree.tar.gz  100%[============================================== ]     661  --.-KB/s    in 0s      \n\n2016-10-30 13:32:07 (380 MB/s) - \u2018example_combine_tree.tar.gz\u2019 saved [661/661] \n\n\n$ tar -zxvf example_combine_tree.tar.gz \nexample_combine_tree/\nexample_combine_tree/tree2.tree\nexample_combine_tree/tree1.tree  Merge  tree1.tree  and  tree2.tree :  $ cd example_combine_tree/\n$ cat tree1.tree tree2.tree   combine.tree  Combine trees:  PhySpeTree combine -i combine.tree -o combineTree  Outputs:\nupdate PhySpeTree work follow fig  combine/\n        RAxML_info.T1\n        RAxML_MajorityRuleConsensusTree.T1   RAxML_info.T1 : logs in running RAxML.  RAxML_MajorityRuleConsensusTree.T1 : the majority rule consensus tree.", 
            "title": "example"
        }, 
        {
            "location": "/usage/#iview", 
            "text": "PhySpeTree provides the  iview  module to annotate taxonomic information (kingdom, phylum, class, or order) of output trees and to generate configure files linked to  iTol .  $ PhySpeTree iview -i organism_example_list.txt --range", 
            "title": "iview"
        }, 
        {
            "location": "/usage/#iview-options", 
            "text": "option  Description      -h  Print help message and exits.    -i  Input a TXT file containing abbreviated species names.    -o  A directory to store outputs. The default is \"iview\".    -a  Colored ranges [kingdom, phylum, class or order].    -r/--range  Annotating labels with ranges by kingdom, phylum, class or order. The default is phylum.    -c/--color  Annotating labels without ranges by kingdom, phylum, class or order. The default is phylum.    -l/--labels  Change species labels from abbreviated names to full names.", 
            "title": "iview options"
        }, 
        {
            "location": "/usage/#example_3", 
            "text": "Download the example file:  $ wget  https://yangfangs.github.io/physpetools/example/organism_example_list.txt \n\n--2016-10-30 13:40:48--  https://yangfangs.github.io/physpetools/example/organism_example_list.txt\nResolving yangfangs.github.io (yangfangs.github.io)... 151.101.48.133\nConnecting to yangfangs.github.io (yangfangs.github.io)|151.101.48.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 39 [text/plain]\nSaving to: \u2018organism_example_list.txt\u2019\n\norganism_example_list.txt    100%[============================================== ]      39  --.-KB/s    in 0s      \n\n2016-10-30 13:40:50 (21.5 MB/s) - \u2018organism_example_list.txt\u2019 saved [39/39]  Annotate the tree by kingdom  $ PhySpeTree iview -i organism_example_list.txt --range -a kingdom\nColor range by kingdom was complete.  The color range file is store in the  iview  folder:  $ cd iview\n$ cat range_color_by_kingdom.txt \nTREE_COLORS\nSEPARATOR TAB\nDATA\naca     range   #BEBF5A Prokaryotes\nace     range   #BEBF5A Prokaryotes\nacl     range   #BEBF5A Prokaryotes\nacn     range   #BEBF5A Prokaryotes\naco     range   #BEBF5A Prokaryotes\nacp     range   #BEBF5A Prokaryotes\nadg     range   #BEBF5A Prokaryotes\nadk     range   #BEBF5A Prokaryotes\naeh     range   #BEBF5A Prokaryotes\naeq     range   #BEBF5A Prokaryotes  Annotate the tree by phylum  $ PhySpeTree iview -i organism_example_list.txt --range -a phylum\nColor range by phylum was complete.  The color range file is store in the  iview  folder:  $ cd iview\n$ cat range_color_by_phylum.txt \nTREE_COLORS\nSEPARATOR TAB\nDATA\naca     range   #865142 Bacteria\nace     range   #865142 Bacteria\nacl     range   #865142 Bacteria\nacn     range   #865142 Bacteria\naco     range   #865142 Bacteria\nacp     range   #865142 Bacteria\nadg     range   #865142 Bacteria\nadk     range   #865142 Bacteria\naeh     range   #865142 Bacteria\naeq     range   #865142 Bacteria  Annotate the tree by class  $ PhySpeTree iview -i organism_example_list.txt --range -a class\nColor range by class was complete.  The color range file is store in the  iview  folder:  $ cd iview\n$ cat range_color_by_class.txt \nTREE_COLORS\nSEPARATOR TAB\nDATA\naca     range   #9AB7F3 Acidobacteria\nace     range   #99D1DB Actinobacteria\nacl     range   #A5E58D Tenericutes\nacn     range   #94F1C1 Alphaproteobacteria\naco     range   #D67A21 Synergistetes\nacp     range   #DD9284 Deltaproteobacteria\nadg     range   #3E70B8 Firmicutes - Clostridia\nadk     range   #DDC8B7 Betaproteobacteria\naeh     range   #72E137 Gammaproteobacteria - Others\naeq     range   #99D1DB Actinobacteria  Annotate the tree by order  $ PhySpeTree iview -i organism_example_list.txt --range -a order\nColor range by order was complete.  The color range file is store in the  iview  folder:  $ cd iview\n$ cat range_color_by_order.txt \nTREE_COLORS\nSEPARATOR TAB\nDATA\naca     range   #AA8761 Acidobacterium\nace     range   #8770BC Acidothermus\nacl     range   #3BD26B Acholeplasma\nacn     range   #D1B487 Anaplasma\naco     range   #D96D21 Aminobacterium\nacp     range   #AC4E16 Anaeromyxobacter\nadg     range   #287AD8 Ammonifex\nadk     range   #C8184E Alicycliphilus\naeh     range   #57A569 Alkalilimnicola\naeq     range   #F1A2B7 Adlercreutzia", 
            "title": "example"
        }, 
        {
            "location": "/usage/#check", 
            "text": "The  check  module is used to check whether input organisms are in pre-built databases.  $ PhySpeTree check -i organism_example_list.txt --ehcp", 
            "title": "check"
        }, 
        {
            "location": "/usage/#check-options", 
            "text": "option  Description      -h  Print help message and exits.    -i  Input a TXT file containing abbreviated species names.    -o  A directory to store outputs. The default is \"check\".    --hcp  Check whether organisms are supported in the KEGG database.    --ehcp  Check input organisms prepare for extend autobuild tree module.    --srna  Check whether organisms are supported in the SILVA database.", 
            "title": "check options"
        }, 
        {
            "location": "/usage/#example_4", 
            "text": "Check extended organisms in  autobuild  Determine proteins to be prepared in the  autobuild  module with the  --ehcp  option, for example,  organism_example_list.txt  Download the example file:  $ wget  https://yangfangs.github.io/physpetools/example/organism_example_list.txt \n\n--2016-10-30 13:40:48--  https://yangfangs.github.io/physpetools/example/organism_example_list.txt\nResolving yangfangs.github.io (yangfangs.github.io)... 151.101.48.133\nConnecting to yangfangs.github.io (yangfangs.github.io)|151.101.48.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 39 [text/plain]\nSaving to: \u2018organism_example_list.txt\u2019\n\norganism_example_list.txt    100%[============================================== ]      39  --.-KB/s    in 0s      \n\n2016-10-30 13:40:50 (21.5 MB/s) - \u2018organism_example_list.txt\u2019 saved [39/39]  Check:   $ PhySpeTree check -i organism_example_list.txt --ehcp\n\n'Ribosomal protein L1' ----------------------------------  p1.fasta\n\n'DNA-directed RNA polymerase subunit alpha' ----------------------------------  p2.fasta\n\n'Leucyl-tRNA synthetase' ----------------------------------  p3.fasta\n\n'Metal-dependent proteases with chaperone activity' ----------------------------------  p4.fasta\n\n'Phenylalanine-tRNA synthethase alpha subunit' ----------------------------------  p5.fasta\n\n'Predicted GTPase probable translation factor' ----------------------------------  p6.fasta\n\n'Ribosomal protein L11' ----------------------------------  p7.fasta\n\n'Ribosomal protein L13' ----------------------------------  p8.fasta\n\n'Ribosomal protein L14' ----------------------------------  p9.fasta\n\n'Ribosomal protein L22' ----------------------------------  p10.fasta\n\n'Ribosomal protein L3' ----------------------------------  p11.fasta\n\n'Ribosomal protein L5' ----------------------------------  p12.fasta\n\n'Ribosomal protein S11' ----------------------------------  p13.fasta\n\n'Ribosomal protein S17' ----------------------------------  p14.fasta\n\n'Ribosomal protein S2' ----------------------------------  p15.fasta\n\n'Ribosomal protein S3' ----------------------------------  p16.fasta\n\n'Ribosomal protein S4' ----------------------------------  p17.fasta\n\n'Ribosomal protein S5' ----------------------------------  p18.fasta\n\n'Ribosomal protein S7' ----------------------------------  p19.fasta\n\n'Ribosomal protein S8' ----------------------------------  p20.fasta\n\n'Ribosomal protein S9' ----------------------------------  p21.fasta\n\n'Seryl-tRNA synthetase' ----------------------------------  p22.fasta\n\n'Arginyl-tRNA synthetase' ----------------------------------  p23.fasta\n\n'DNA-directed RNA polymerase beta subunit' ----------------------------------  p24.fasta\n\n'Ribosomal protein S13' ----------------------------------  p25.fasta\n\nCheck extend highly conserved protein is completed.  The check result is stored in the  check  folder. In  physpe_echp_extend.txt  file indicates class of HCP and their corresponding names, which will be used to prepare extended HCP sequences.  $ cd check\n$ cat physpe_echp_extend.txt \n'Ribosomal protein L1' ----------------------------------  p1.fasta\n'DNA-directed RNA polymerase subunit alpha' ----------------------------------  p2.fasta\n'Leucyl-tRNA synthetase' ----------------------------------  p3.fasta\n'Metal-dependent proteases with chaperone activity' ----------------------------------  p4.fasta\n'Phenylalanine-tRNA synthethase alpha subunit' ----------------------------------  p5.fasta\n'Predicted GTPase probable translation factor' ----------------------------------  p6.fasta\n'Ribosomal protein L11' ----------------------------------  p7.fasta\n'Ribosomal protein L13' ----------------------------------  p8.fasta\n'Ribosomal protein L14' ----------------------------------  p9.fasta\n'Ribosomal protein L22' ----------------------------------  p10.fasta\n'Ribosomal protein L3' ----------------------------------  p11.fasta\n'Ribosomal protein L5' ----------------------------------  p12.fasta\n'Ribosomal protein S11' ----------------------------------  p13.fasta\n'Ribosomal protein S17' ----------------------------------  p14.fasta\n'Ribosomal protein S2' ----------------------------------  p15.fasta\n'Ribosomal protein S3' ----------------------------------  p16.fasta\n'Ribosomal protein S4' ----------------------------------  p17.fasta\n'Ribosomal protein S5' ----------------------------------  p18.fasta\n'Ribosomal protein S7' ----------------------------------  p19.fasta\n'Ribosomal protein S8' ----------------------------------  p20.fasta\n'Ribosomal protein S9' ----------------------------------  p21.fasta\n'Seryl-tRNA synthetase' ----------------------------------  p22.fasta\n'Arginyl-tRNA synthetase' ----------------------------------  p23.fasta\n'DNA-directed RNA polymerase beta subunit' ----------------------------------  p24.fasta\n'Ribosomal protein S13' ----------------------------------  p25.fasta  Check whether input organisms are supported in PhySpeTree  Check whether input species are supported by the KEGG database when using the  --hcp  method, for example  example download .  Download the example file:  $ wget  https://yangfangs.github.io/physpetools/example/191speciesnames.txt \n\n--2016-10-30 14:48:21--  https://yangfangs.github.io/physpetools/example/191speciesnames.txt\nResolving yangfangs.github.io (yangfangs.github.io)... 151.101.48.133\nConnecting to yangfangs.github.io (yangfangs.github.io)|151.101.48.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 773 [text/plain]\nSaving to: \u2018191speciesnames.txt\u2019\n\n191speciesnames.txt          100%[============================================== ]     773  --.-KB/s    in 0s      \n\n2016-10-30 14:48:22 (322 MB/s) - \u2018191speciesnames.txt\u2019 saved [773/773]  The check results show one organism named 'ges' is not supported in PhySpeTree:  $ PhySpeTree check -i 191speciesnames.txt --hcp\nWARNING: The following species are not supported by KEGG DATABASE:\nges\nChecked  whether the input species names in KEGG DATABASE completed.  Check whether input species are supported by SILVA database when using the  --srna  metho, for example  example download  Download the example file:  $ wget  https://yangfangs.github.io/physpetools/example/191speciesnames.txt \n\n--2016-10-30 14:48:21--  https://yangfangs.github.io/physpetools/example/191speciesnames.txt\nResolving yangfangs.github.io (yangfangs.github.io)... 151.101.48.133\nConnecting to yangfangs.github.io (yangfangs.github.io)|151.101.48.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 773 [text/plain]\nSaving to: \u2018191speciesnames.txt\u2019\n\n191speciesnames.txt          100%[============================================== ]     773  --.-KB/s    in 0s      \n\n2016-10-30 14:48:22 (322 MB/s) - \u2018191speciesnames.txt\u2019 saved [773/773]  The check results show 28 organisms are not supported in PhySpeTree:  \n(progect) [yangfang@localhost test_check] $ PhySpeTree check -i 191speciesnames.txt --srna\nWARNING: The following species are not supported by SILVA DATABASE:\nneq\nape\ntac\nmmp\ngla\ntps\ncho\nddi\nspo\naga\ntru\nmpu\nlin\nban\nbce\nljo\nsan\nspg\nges\nlis\nsco\ncdi\nmle\nwsu\nrpr\nbpe\nbpa\nppr\nChecked  whether the input species names in SILVA DATABASE completed.  For organisms not in the pre-built list, PhySpeTree provides extend options ( --echp  or  --esrna ) to insert manually prepared sequences.", 
            "title": "example"
        }, 
        {
            "location": "/tutorial/", 
            "text": "PhySpeTree Tutorial\n\n\nAutomatically reconstruct the tree-of-life\n\n\nHere we show how to use PhySpeTree to reconstruct tree-of-life (191 organisms) by two methods (HCP and SSU rRNA).\n\n\nReconstruct the tree-of-life by the HCP method\n\n\nConcept\n\n\n\n\nThe main concept of the HCP method is to concatenate highly conserved proteins into a supermatrix and then build species tree. Here we prepared \n31 classes of HCP\n to build the tree.\n\n\n1. Prepare input species\n\n\nDownload 191 \nKEGG\n abbreviated species names:\n\n\n$ wget \nhttps://yangfangs.github.io/physpetools/example/191speciesnames.txt\n\n\n--2016-10-30 15:26:06--  https://yangfangs.github.io/physpetools/example/191speciesnames.txt\nResolving yangfangs.github.io (yangfangs.github.io)... 151.101.48.133\nConnecting to yangfangs.github.io (yangfangs.github.io)|151.101.48.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 773 [text/plain]\nSaving to: \u2018191speciesnames.txt\u2019\n\n191speciesnames.txt          100%[==============================================\n]     773  --.-KB/s    in 0s      \n\n$ cat 191speciesnames.txt \nneq\npai\nape\nsto\nssoa\ntvo\ntac\nafu\n.....\n\n\n\n\n2. Reconstruct the species tree\n\n\nUse \n--hcp\n option to specify the HCP method.\n\n\n$ PhySpeTree autobuild -i 191speciesnames.txt -o 191_pro --hcp\n\nLoading organisms names success.....\n\nThe result are store in:191_pro\n\nNow loading data and constructing phylogenetic tree......\n2016-10-30 15:32:07,894 Checking organisms INFO: The species: ges can't match in KEGG protein index database\n2016-10-30 15:32:07,894 Checking organisms WARNING: These species can't match in KEGG protein index database so removed and reconstruct phylogenetic tree.\n2016-10-30 15:32:07,894 KEGG INDEX DB INFO: Read organisms names success\n2016-10-30 15:32:34,213 KEGG INDEX DB INFO: Retrieve and download of highly conserved protein 'Ribosomal protein L1' was successful store in p1.fasta file\n2016-10-30 15:33:00,679 KEGG INDEX DB INFO: Retrieve and download of highly conserved protein 'Leucyl-tRNA synthetase' was successful store in p2.fasta file\n2016-10-30 15:33:25,052 KEGG INDEX DB INFO: Retrieve and download of highly conserved protein 'Ribosomal protein L14' was successful store in p3.fasta file\n2016-10-30 15:33:49,649 KEGG INDEX DB INFO: Retrieve and download of highly conserved protein 'Ribosomal protein L5' was successful store in p4.fasta file\n2016-10-30 15:34:14,510 KEGG INDEX DB INFO: Retrieve and download of highly conserved protein 'Ribosomal protein S7' was successful store in p5.fasta file\n2016-10-30 15:34:41,123 KEGG INDEX DB INFO: Retrieve and download of highly conserved protein 'Arginyl-tRNA synthetase' was successful store in p6.fasta file\n2016-10-30 15:34:41,123 KEGG INDEX DB INFO: Retrieve from KEGG database 6 highly conserved proteins\n......\n\n\n\n\n3. Get the output tree\n\n\n\n\n4. Annotate and view the tree\n\n\nPhySpeTree provides the \niview\n module to annotate trees with taxonomic information. The output configure files can be directly used in iTOL, which is a very popular online tool for the display, annotation, and management of phylogenetic trees.\n\n\nUse the \n--labels\n option to change abbreviated species names to full names:\n\n\n$ PhySpeTree iview -i 191speciesnames.txt --labels\nChange abbreviation names to full names complete\nchange labels file was save in iview/labels.txt\n\n$ cd iview\n\n$ cat labels.txt \nLABELS\nSEPARATOR TAB\nDATA\nneq     Nanoarchaeum equitans\npai     Pyrobaculum aerophilum\nape     Aeropyrum pernix\nsto     Sulfolobus tokodaii\nssoa    Sulfolobus solfataricus SULA\ntvo     Thermoplasma volcanium\ntac     Thermoplasma acidophilum\nafu     Archaeoglobus fulgidus DSM 4304\nhal     Halobacterium sp. NRC-1\nmac     Methanosarcina acetivorans\nmma     Methanosarcina mazei Go1\npfu     Pyrococcus furiosus DSM 3638\npho     Pyrococcus horikoshii\npab     Pyrococcus abyssi\nmth     Methanothermobacter thermautotrophicus\nmka     Methanopyrus kandleri\nmmp     Methanococcus maripaludis S2\n.....\n\n\n\n\n\n\n\n\nUse the \n-a\n option to color branch ranges by phylum (default):\n\n\n\n\n$ PhySpeTree iview -i 191speciesnames.txt -o iview --range -a phylum\nColor range by phylum was complete.\nColor range annotation was save in iview/range_color_by_phylum.txt\n\n$ cd iview\n\n$ cat range_color_by_phylum.txt \nTREE_COLORS\nSEPARATOR TAB\nDATA\nneq     range   #996433 Archaea\npai     range   #996433 Archaea\nape     range   #996433 Archaea\nsto     range   #996433 Archaea\nssoa    range   #996433 Archaea\ntvo     range   #996433 Archaea\ntac     range   #996433 Archaea\nafu     range   #996433 Archaea\nhal     range   #996433 Archaea\nmac     range   #996433 Archaea\nmma     range   #996433 Archaea\npfu     range   #996433 Archaea\npho     range   #996433 Archaea\npab     range   #996433 Archaea\nmth     range   #996433 Archaea\nmka     range   #996433 Archaea\nmmp     range   #996433 Archaea\nmja     range   #996433 Archaea\n.....\n\n\n\n\n\n\nReconstruct the tree-of-life by the SSU rRNA method\n\n\nConcept\n\n\n\n\nPhySpeTree provides \n--srna\n option to reconstruct species trees by the SSU rRNA method. The concept of this method is to align SSU rRNA sequences and then reconstruct the specie tree.\n\n\n1. Prepare input species\n\n\n\n$ wget \nhttps://yangfangs.github.io/physpetools/example/191speciesnames.txt\n\n\n--2016-10-30 15:26:06--  https://yangfangs.github.io/physpetools/example/191speciesnames.txt\nResolving yangfangs.github.io (yangfangs.github.io)... 151.101.48.133\nConnecting to yangfangs.github.io (yangfangs.github.io)|151.101.48.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 773 [text/plain]\nSaving to: \u2018191speciesnames.txt\u2019\n\n$ cat 191speciesnames.txt \nneq\npai\nape\nsto\nssoa\ntvo\ntac\nafu\n.....\n\n\n\n\n2. Reconstruct the species tree\n\n\n$ PhySpeTree autobuild -i 191speciesnames.txt -o 191_rna --srna\nLoading organisms names success.....\n\nThe result are store in:191_rna\n\nNow loading data and constructing phylogenetic tree......\n2016-10-30 15:40:17,107 Checking organisms INFO: The organism: neq can't match in SSU rRNA database\n2016-10-30 15:40:17,107 Checking organisms INFO: The organism: ape can't match in SSU rRNA database\n2016-10-30 15:40:17,107 Checking organisms INFO: The organism: tac can't match in SSU rRNA database\n2016-10-30 15:40:17,107 Checking organisms INFO: The organism: mmp can't match in SSU rRNA database\n2016-10-30 15:40:17,107 Checking organisms INFO: The organism: gla can't match in SSU rRNA database\n2016-10-30 15:40:17,107 Checking organisms INFO: The organism: tps can't match in SSU rRNA database\n2016-10-30 15:40:17,107 Checking organisms INFO: The organism: cho can't match in SSU rRNA database\n2016-10-30 15:40:17,107 Checking organisms INFO: The organism: ddi can't match in SSU rRNA database\n2016-10-30 15:40:17,107 Checking organisms INFO: The organism: spo can't match in SSU rRNA database\n2016-10-30 15:40:17,107 Checking organisms INFO: The organism: aga can't match in SSU rRNA database\n2016-10-30 15:40:17,107 Checking organisms INFO: The organism: tru can't match in SSU rRNA database\n2016-10-30 15:40:17,107 Checking organisms INFO: The organism: mpu can't match in SSU rRNA database\n2016-10-30 15:40:17,107 Checking organisms INFO: The organism: lin can't match in SSU rRNA database\n2016-10-30 15:40:17,107 Checking organisms INFO: The organism: ban can't match in SSU rRNA database\n2016-10-30 15:40:17,107 Checking organisms INFO: The organism: bce can't match in SSU rRNA database\n2016-10-30 15:40:17,108 Checking organisms INFO: The organism: ljo can't match in SSU rRNA database\n2016-10-30 15:40:17,108 Checking organisms INFO: The organism: san can't match in SSU rRNA database\n2016-10-30 15:40:17,108 Checking organisms INFO: The organism: spg can't match in SSU rRNA database\n2016-10-30 15:40:17,108 Checking organisms INFO: The organism: ges can't match in SSU rRNA database\n2016-10-30 15:40:17,108 Checking organisms INFO: The organism: lis can't match in SSU rRNA database\n2016-10-30 15:40:17,108 Checking organisms INFO: The organism: sco can't match in SSU rRNA database\n2016-10-30 15:40:17,108 Checking organisms INFO: The organism: cdi can't match in SSU rRNA database\n2016-10-30 15:40:17,108 Checking organisms INFO: The organism: mle can't match in SSU rRNA database\n2016-10-30 15:40:17,108 Checking organisms INFO: The organism: wsu can't match in SSU rRNA database\n2016-10-30 15:40:17,108 Checking organisms INFO: The organism: rpr can't match in SSU rRNA database\n2016-10-30 15:40:17,108 Checking organisms INFO: The organism: bpe can't match in SSU rRNA database\n2016-10-30 15:40:17,108 Checking organisms INFO: The organism: bpa can't match in SSU rRNA database\n2016-10-30 15:40:17,108 Checking organisms INFO: The organism: ppr can't match in SSU rRNA database\n2016-10-30 15:40:17,108 Checking organisms WARNING: These species can't match in SSU rRNA database so removing and reconstructing phylogenetic tree.\n2016-10-30 15:40:17,108 SSU rRNA DB INFO: Read organisms names success\n2016-10-30 15:40:24,505 SSU rRNA DB INFO: Retrieve and download of organism 'pai' SSU rRNA sequence was successful\n2016-10-30 15:40:26,960 SSU rRNA DB INFO: Retrieve and download of organism 'sto' SSU rRNA sequence was successful\n2016-10-30 15:40:29,313 SSU rRNA DB INFO: Retrieve and download of organism 'ssoa' SSU rRNA sequence was successful\n2016-10-30 15:40:32,387 SSU rRNA DB INFO: Retrieve and download of organism 'tvo' SSU rRNA sequence was successful\n2016-10-30 15:40:35,158 SSU rRNA DB INFO: Retrieve and download of organism 'afu' SSU rRNA sequence was successful\n2016-10-30 15:40:37,507 SSU rRNA DB INFO: Retrieve and download of organism 'hal' SSU rRNA sequence was successful\n2016-10-30 15:40:41,282 SSU rRNA DB INFO: Retrieve and download of organism 'mac' SSU rRNA sequence was successful\n......\n\n\n\n\n3. Get the output tree\n\n\n\n\n4. Annotate and view the tree\n\n\nUse the \n--labels\n option to change abbreviated species names to full names:\n\n\n$ PhySpeTree iview -i 191speciesnames.txt --labels\nChange abbreviation names to full names complete\nchange labels file was save in iview/labels.txt\n\n$ cd iview\n\n$ cat labels.txt \nLABELS\nSEPARATOR TAB\nDATA\nneq     Nanoarchaeum equitans\npai     Pyrobaculum aerophilum\nape     Aeropyrum pernix\nsto     Sulfolobus tokodaii\nssoa    Sulfolobus solfataricus SULA\ntvo     Thermoplasma volcanium\ntac     Thermoplasma acidophilum\nafu     Archaeoglobus fulgidus DSM 4304\nhal     Halobacterium sp. NRC-1\nmac     Methanosarcina acetivorans\nmma     Methanosarcina mazei Go1\npfu     Pyrococcus furiosus DSM 3638\npho     Pyrococcus horikoshii\npab     Pyrococcus abyssi\nmth     Methanothermobacter thermautotrophicus\nmka     Methanopyrus kandleri\nmmp     Methanococcus maripaludis S2\n.....\n\n\n\n\n\n\nColor branch ranges by phylum:\n\n\n$ PhySpeTree iview -i 191speciesnames.txt -o iview --range -a phylum\nColor range by phylum was complete.\nColor range annotation was save in iview/range_color_by_phylum.txt\n\n$ cd iview\n\n$ cat range_color_by_phylum.txt \nTREE_COLORS\nSEPARATOR TAB\nDATA\nneq     range   #996433 Archaea\npai     range   #996433 Archaea\nape     range   #996433 Archaea\nsto     range   #996433 Archaea\nssoa    range   #996433 Archaea\ntvo     range   #996433 Archaea\ntac     range   #996433 Archaea\nafu     range   #996433 Archaea\nhal     range   #996433 Archaea\nmac     range   #996433 Archaea\nmma     range   #996433 Archaea\npfu     range   #996433 Archaea\npho     range   #996433 Archaea\npab     range   #996433 Archaea\nmth     range   #996433 Archaea\nmka     range   #996433 Archaea\nmmp     range   #996433 Archaea\nmja     range   #996433 Archaea\n.....\n\n\n\n\n\n\nColor branch ranges by class:\n\n\n$ PhySpeTree iview -i 191speciesnames.txt --range -a class\nColor range by class was complete.\nColor range annotation was save in iview/range_color_by_class.txt\n\n$ cd iview\n\n$ cat range_color_by_class.txt \nTREE_COLORS\nSEPARATOR TAB\nDATA\nneq     range   #4A959E Nanoarchaeota\npai     range   #58CD80 Crenarchaeota\nape     range   #58CD80 Crenarchaeota\nsto     range   #58CD80 Crenarchaeota\nssoa    range   #58CD80 Crenarchaeota\ntvo     range   #639BB0 Euryarchaeota\ntac     range   #639BB0 Euryarchaeota\nafu     range   #639BB0 Euryarchaeota\nhal     range   #639BB0 Euryarchaeota\nmac     range   #639BB0 Euryarchaeota\nmma     range   #639BB0 Euryarchaeota\npfu     range   #639BB0 Euryarchaeota\npho     range   #639BB0 Euryarchaeota\npab     range   #639BB0 Euryarchaeota\nmth     range   #639BB0 Euryarchaeota\nmka     range   #639BB0 Euryarchaeota\nmmp     range   #639BB0 Euryarchaeota\nmja     range   #639BB0 Euryarchaeota\ngla     range   #C5D49E Diplomonads\nlma     range   #899DDB Euglenozoa\ntps     range   #7DD2ED Stramenopiles\ncho     range   #99A01A Alveolates\n.....\n\n\n\n\n\n\nAutomatically reconstruct \nPlantae\n species tree\n\n\nHere we use PhySpeTree to automatically reconstructed 52 plants species tree by the HCP method. \n\n\n1. Prepare input species\n\n\n\n$ wget \nhttps://yangfangs.github.io/physpetools/example/52plantsnames.txt\n\n\n--2016-10-30 15:44:25--  https://yangfangs.github.io/physpetools/example/52plantsnames.txt\nResolving yangfangs.github.io (yangfangs.github.io)... 151.101.48.133\nConnecting to yangfangs.github.io (yangfangs.github.io)|151.101.48.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 211 [text/plain]\nSaving to: \u201852plantsnames.txt\u2019\n\n52plantsnames.txt            100%[==============================================\n]     211  --.-KB/s    in 0s      \n\n2016-10-30 15:44:27 (120 MB/s) - \u201852plantsnames.txt\u2019 saved [211/211]\n\n$ cat 52plantsnames.txt\naly\nath\natr\nbdi\nbpg\nbrp\nbvg\ncam\nccp\ncic\ncit\ncme\ncmo\n.....\n\n\n\n\n2. Reconstruct the \nPlantae\n species tree\n\n\n$ PhySpeTree autobuild -i 52plantsnames.txt -o 52plant_pro --hcp -t 6\n\nLoading organisms names success.....\n\nThe result are store in:52plant_pro\n\nNow loading data and constructing phylogenetic tree......\n2016-10-30 15:48:23,420 KEGG INDEX DB INFO: Read organisms names success\n2016-10-30 15:48:36,020 KEGG INDEX DB INFO: Retrieve and download of highly conserved protein 'Leucyl-tRNA synthetase' was successful store in p1.fasta file\n2016-10-30 15:48:42,369 KEGG INDEX DB INFO: Retrieve and download of highly conserved protein 'Metal-dependent proteases with chaperone activity' was successful store in p2.fasta file\n2016-10-30 15:48:46,774 KEGG INDEX DB INFO: Retrieve and download of highly conserved protein 'Phenylalanine-tRNA synthethase alpha subunit' was successful store in p3.fasta file\n2016-10-30 15:48:50,559 KEGG INDEX DB INFO: Retrieve and download of highly conserved protein 'Preprotein translocase subunit SecY' was successful store in p4.fasta file\n2016-10-30 15:48:54,153 KEGG INDEX DB INFO: Retrieve and download of highly conserved protein 'Ribosomal protein L15' was successful store in p5.fasta file\n2016-10-30 15:48:57,631 KEGG INDEX DB INFO: Retrieve and download of highly conserved protein 'Ribosomal protein L16/L10E' was successful store in p6.fasta file\n2016-10-30 15:49:01,311 KEGG INDEX DB INFO: Retrieve and download of highly conserved protein 'Ribosomal protein L18' was successful store in p7.fasta file\n2016-10-30 15:49:09,038 KEGG INDEX DB INFO: Retrieve and download of highly conserved protein 'Ribosomal protein L22' was successful store in p8.fasta file\n2016-10-30 15:49:18,417 KEGG INDEX DB INFO: Retrieve and download of highly conserved protein 'Ribosomal protein L3' was successful store in p9.fasta file\n2016-10-30 15:49:24,771 KEGG INDEX DB INFO: Retrieve and download of highly conserved protein 'Ribosomal protein L5' was successful store in p10.fasta file\n2016-10-30 15:49:31,840 KEGG INDEX DB INFO: Retrieve and download of highly conserved protein 'Ribosomal protein L6P/L9E' was successful store in p11.fasta file\n2016-10-30 15:49:36,652 KEGG INDEX DB INFO: Retrieve and download of highly conserved protein 'Ribosomal protein S11' was successful store in p12.fasta file\n2016-10-30 15:49:41,464 KEGG INDEX DB INFO: Retrieve and download of highly conserved protein 'Ribosomal protein S15P/S13E' was successful store in p13.fasta file\n2016-10-30 15:49:46,272 KEGG INDEX DB INFO: Retrieve and download of highly conserved protein 'Ribosomal protein S17' was successful store in p14.fasta file\n2016-10-30 15:49:51,186 KEGG INDEX DB INFO: Retrieve and download of highly conserved protein 'Ribosomal protein S2' was successful store in p15.fasta file\n2016-10-30 15:50:04,278 KEGG INDEX DB INFO: Retrieve and download of highly conserved protein 'Ribosomal protein S8' was successful store in p16.fasta file\n2016-10-30 15:50:13,914 KEGG INDEX DB INFO: Retrieve and download of highly conserved protein 'Seryl-tRNA synthetase' was successful store in p17.fasta file\n2016-10-30 15:50:19,753 KEGG INDEX DB INFO: Retrieve and download of highly conserved protein 'Ribosomal protein S13' was successful store in p18.fasta file\n2016-10-30 15:50:19,753 KEGG INDEX DB INFO: Retrieve from KEGG database 18 highly conserved proteins\n......\n\n\n\n\n3. Get the output tree\n\n\n\n\n4. Annotate and view the tree\n\n\nUse the \n--labels\n option to change abbreviated species names to full names:\n\n\n$ PhySpeTree iview -i 52plantsnames.txt --labels\nChange abbreviation names to full names complete\nchange labels file was save in iview/labels.txt\n\n$ cd iview\n\n$ cat labels.txt \nLABELS\nSEPARATOR TAB\nDATA\naly     Arabidopsis lyrata (lyrate rockcress)\nath     Arabidopsis thaliana (thale cress)\natr     Amborella trichopoda\nbdi     Brachypodium distachyon\nbpg     Bathycoccus prasinos\nbrp     Brassica rapa (field mustard)\nbvg     Beta vulgaris (sugar beet)\ncam     Cicer arietinum (chickpea)\nccp     Chondrus crispus (carragheen)\ncic     Citrus clementina (mandarin orange)\ncit     Citrus sinensis (Valencia orange)\ncme     Cyanidioschyzon merolae\ncmo     Cucumis melo (muskmelon)\ncrb     Capsella rubella\ncre     Chlamydomonas reinhardtii\ncsl     Coccomyxa subellipsoidea\ncsv     Cucumis sativus (cucumber)\ncvr     Chlorella variabilis\n.....\n\n\n\n\n\n\nColor branch ranges by class:\n\n\n$ PhySpeTree iview -i 52plantsnames.txt -o iview --range -a phylum\nColor range by class was complete.\nColor range annotation was save in iview/range_color_by_class.txt\n$ cd iview\n\n$ cat range_color_by_class.txt \nTREE_COLORS\nSEPARATOR TAB\nDATA\naly     range   #1C748D Eudicots\nath     range   #1C748D Eudicots\natr     range   #C4DE94 Basal Magnoliophyta\nbdi     range   #854B9F Monocots\nbpg     range   #784CE5 Green algae\nbrp     range   #1C748D Eudicots\nbvg     range   #1C748D Eudicots\ncam     range   #1C748D Eudicots\nccp     range   #CEDDB3 Red algae\ncic     range   #1C748D Eudicots\ncit     range   #1C748D Eudicots\ncme     range   #CEDDB3 Red algae\ncmo     range   #1C748D Eudicots\ncrb     range   #1C748D Eudicots\ncre     range   #784CE5 Green algae\ncsl     range   #784CE5 Green algae\n.....\n\n\n\n\n\n\nExtend species tree with new organisms\n\n\nHere we show how to use PhySpeTree to expand insert a a pre-built species tree with new organisms. We insert the newly identified organism \nLokiarchaeum sp. GC14_75\n (loki) to the tree-of-life.\n\n\nExtend species tree by the SSU rRNA method\n\n\nConcept\n\n\n\n\n1. Manually prepare the SSU rRNA sequence\n\n\nWe prepare the SSU rRNA sequence of loki and save it in a FASTA format file, for example \nextend_rna_olki.fasta\n.\n\n\nDownload the example file:\n\n\n$ wget \nhttps://yangfangs.github.io/physpetools/example/extend_rna_loki.fasta\n\n\n--2016-10-30 15:54:38--  https://yangfangs.github.io/physpetools/example/extend_rna_loki.fasta\nResolving yangfangs.github.io (yangfangs.github.io)... 151.101.24.133\nConnecting to yangfangs.github.io (yangfangs.github.io)|151.101.24.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 1200 (1.2K) [application/octet-stream]\nSaving to: \u2018extend_rna_loki.fasta\u2019\n\nextend_rna_loki.fasta        100%[==============================================\n]   1.17K  --.-KB/s    in 0s      \n\n2016-10-30 15:54:39 (553 MB/s) - \u2018extend_rna_loki.fasta\u2019 saved [1200/1200]\n\n\n\n\ncheck:\n\n\n$ cat extend_rna_olki.fasta\n\nloki\nGAGAUGGGUACUGAGACAACGACCCAGGCCUUACGAGGCGCAGCAGGCGCGAAACCUCCGCAAUACACGAAAGUGUGACG\nGGGUUACCCAAAGUGUUCAAUUAUGAACUGUGGUAGGUGAGUAAUGUUCCCUACUAGAAAGGAGAGGGCAAGGCUGGUGC\nCAGCCGCCGCGGUAAAACCAGCUCUUCAAGUGGUCGGGAUAAUUAUUGGGCUUAAAGUGUCCGUAGCCGGUUUAGUAAGU\nUCCUGGUAAAAUCGGGUAGCUUAACUAUCUGUAUGCUAGGAAUACUGCUAUACUAGAGGACGGGAGAGGUCUGAGGUACU\nACAGGGGUAGGGGUGAAAUCUUAUAAUCCUUGUAGGACCACCAGUGGCGAAGGCGUCAGACUGGAACGUGCCUGACGGUG\nAGGGACGAAAGCCAGGGGAGCGAACCGGAUUAGAUACCCGGGUAGUCCUGGCCGUAAACGAUGCAUACUAGGUGAUGGCA\nUGGCCAUGAGCCAUGUCAGUGCCGUAGGGAAACCGUUAAGUGUGCCGCCUGGGAAGUACGGUCGCAAGGCUAAAACUUAA\nAGGAAUUGGCGGGGGAGCACCACAAGGGGUGAAGCCUGCGGUUCAAUUGGACUCAACGCCGGGAAACUUACCAGGGGAGA\nCAGCAGAAUGAUGGUCAGGUUGACGACCUUACCUGACAAGCUGAGAGGAGGUGCAUGGCCGUCGCCAGUUCGUGCUGUGA\nGGUAUCCUGUUAAGUCAGGCAACGAACGAGAUCCGCACCUUUAUUUGCCAGCAAGAAGUCACGACUUCGUUGGGAACACU\nAAAGGGACCGCCGUCGAUAAGACGGAGGAAGGAGCGGGCAAAGGCAGGUCAGUAUGCCCCGAAACCCCUGGGCUACACGC\nGGGCUGCAAUGGUAUGAACAAUGGGCUGUAACUCCGAAAGGAGAAACCAAUCCCGAAAUCAUAUCUCAGUGGGAAUUGUC\nGGCUGUAACCCGCCGACAUGAACGUGGAAUCCCUAGUAAUCGUGUGUCAUCAUCGCACGGUGAAUACGUCUCUGCUCCUU\nGCACACACCGCCCGUCGCUCCAUCCGAGUGUGCUAAAAAUGAGGUAUGGUCAGUCUGGUCGUAUCGAAUUUCUAGUAUGC\nGAGGGGGGAGAAGUCGUAACAAGGUAGCCGUAGGGGAACCUGCGGCUGGAUCACCUCCU\n\n\n\n\n2. Insert loki to the tree-of-life\n\n\nUpdate the tree-of-life by combining the \n--esrna\n and \n-e\n options.\n\n\n$ PhySpeTree autobuild -i 191speciesnames.txt -o extend_rna -e extend_rna_loki.fasta --esrna -t 6\n\nLoading organisms names success.....\n\nThe result are store in:extend_rna\n\nNow loading data and constructing phylogenetic tree......\n2016-10-30 16:10:01,551 Checking organisms INFO: The organism: neq can't match in SSU rRNA database\n2016-10-30 16:10:01,551 Checking organisms INFO: The organism: ape can't match in SSU rRNA database\n2016-10-30 16:10:01,551 Checking organisms INFO: The organism: tac can't match in SSU rRNA database\n2016-10-30 16:10:01,551 Checking organisms INFO: The organism: mmp can't match in SSU rRNA database\n2016-10-30 16:10:01,551 Checking organisms INFO: The organism: gla can't match in SSU rRNA database\n2016-10-30 16:10:01,551 Checking organisms INFO: The organism: tps can't match in SSU rRNA database\n2016-10-30 16:10:01,551 Checking organisms INFO: The organism: cho can't match in SSU rRNA database\n2016-10-30 16:10:01,551 Checking organisms INFO: The organism: ddi can't match in SSU rRNA database\n2016-10-30 16:10:01,551 Checking organisms INFO: The organism: spo can't match in SSU rRNA database\n2016-10-30 16:10:01,552 Checking organisms INFO: The organism: aga can't match in SSU rRNA database\n2016-10-30 16:10:01,552 Checking organisms INFO: The organism: tru can't match in SSU rRNA database\n2016-10-30 16:10:01,552 Checking organisms INFO: The organism: mpu can't match in SSU rRNA database\n2016-10-30 16:10:01,552 Checking organisms INFO: The organism: lin can't match in SSU rRNA database\n2016-10-30 16:10:01,552 Checking organisms INFO: The organism: ban can't match in SSU rRNA database\n2016-10-30 16:10:01,552 Checking organisms INFO: The organism: bce can't match in SSU rRNA database\n2016-10-30 16:10:01,552 Checking organisms INFO: The organism: ljo can't match in SSU rRNA database\n2016-10-30 16:10:01,552 Checking organisms INFO: The organism: san can't match in SSU rRNA database\n2016-10-30 16:10:01,552 Checking organisms INFO: The organism: spg can't match in SSU rRNA database\n2016-10-30 16:10:01,552 Checking organisms INFO: The organism: ges can't match in SSU rRNA database\n2016-10-30 16:10:01,552 Checking organisms INFO: The organism: lis can't match in SSU rRNA database\n2016-10-30 16:10:01,552 Checking organisms INFO: The organism: sco can't match in SSU rRNA database\n2016-10-30 16:10:01,552 Checking organisms INFO: The organism: cdi can't match in SSU rRNA database\n2016-10-30 16:10:01,552 Checking organisms INFO: The organism: mle can't match in SSU rRNA database\n2016-10-30 16:10:01,552 Checking organisms INFO: The organism: wsu can't match in SSU rRNA database\n2016-10-30 16:10:01,552 Checking organisms INFO: The organism: rpr can't match in SSU rRNA database\n2016-10-30 16:10:01,552 Checking organisms INFO: The organism: bpe can't match in SSU rRNA database\n2016-10-30 16:10:01,552 Checking organisms INFO: The organism: bpa can't match in SSU rRNA database\n2016-10-30 16:10:01,552 Checking organisms INFO: The organism: ppr can't match in SSU rRNA database\n2016-10-30 16:10:01,552 Checking organisms WARNING: These species can't match in SSU rRNA database so removing and reconstructing phylogenetic tree.\n2016-10-30 16:10:01,552 SSU rRNA DB INFO: Read organisms names success\n2016-10-30 16:10:02,263 SSU rRNA DB INFO: Retrieve and download of organism 'pai' SSU rRNA sequence was successful\n2016-10-30 16:10:02,468 SSU rRNA DB INFO: Retrieve and download of organism 'sto' SSU rRNA sequence was successful\n2016-10-30 16:10:02,672 SSU rRNA DB INFO: Retrieve and download of organism 'ssoa' SSU rRNA sequence was successful\n2016-10-30 16:10:02,878 SSU rRNA DB INFO: Retrieve and download of organism 'tvo' SSU rRNA sequence was successful\n2016-10-30 16:10:04,408 SSU rRNA DB INFO: Retrieve and download of organism 'afu' SSU rRNA sequence was successful\n2016-10-30 16:10:04,615 SSU rRNA DB INFO: Retrieve and download of organism 'hal' SSU rRNA sequence was successful\n2016-10-30 16:10:05,085 SSU rRNA DB INFO: Retrieve and download of organism 'mac' SSU rRNA sequence was successful\n2016-10-30 16:10:05,638 SSU rRNA DB INFO: Retrieve and download of organism 'mma' SSU rRNA sequence was successful\n2016-10-30 16:10:05,841 SSU rRNA DB INFO: Retrieve and download of organism 'pfu' SSU rRNA sequence was successful\n2016-10-30 16:10:06,086 SSU rRNA DB INFO: Retrieve and download of organism 'pho' SSU rRNA sequence was successful\n2016-10-30 16:10:06,590 SSU rRNA DB INFO: Retrieve and download of organism 'pab' SSU rRNA sequence was successful\n2016-10-30 16:10:07,100 SSU rRNA DB INFO: Retrieve and download of organism 'mth' SSU rRNA sequence was successful\n2016-10-30 16:10:07,303 SSU rRNA DB INFO: Retrieve and download of organism 'mka' SSU rRNA sequence was successful\n.....\n\n\n\n\n3. Annotate and view the tree\n\n\n\n\nExtend species tree by the HCP method\n\n\n\n\nConcept\n\n\n\n\n\n\n1. Identify classes of HCP\n\n\nUse the \ncheck\n module to identify what classes of HCP should be prepapred.\n\n\n$ PhySpeTree check -i 191speciesnames.txt --ehcp\n'Ribosomal protein L1' ----------------------------------\n p1.fasta\n\n'Leucyl-tRNA synthetase' ----------------------------------\n p2.fasta\n\n'Ribosomal protein L14' ----------------------------------\n p3.fasta\n\n'Ribosomal protein L5' ----------------------------------\n p4.fasta\n\n'Ribosomal protein S7' ----------------------------------\n p5.fasta\n\n'Arginyl-tRNA synthetase' ----------------------------------\n p6.fasta\n\nChecked extend highly conserved proteins is completed.\nChecked result was store in check/PhySpeTree_echp_extend.txt\n......\n\n\n\n\n2. Manually prepare HCP sequences\n\n\nAccording to \ncheck\n results, we prepare 6 classes of HCP and store the sequences (p1 ~ p6) into FASTA format files, for example \nhighly_conserved_protein_loki\n\n\nDownload the example file:\n\n\n$ wget \nhttps://yangfangs.github.io/physpetools/example/highly_conserved_protein_loki.tar.gz\n\n\n--2016-10-30 16:36:48--  https://yangfangs.github.io/physpetools/example/highly_conserved_protein_loki.tar.gz\nResolving yangfangs.github.io (yangfangs.github.io)... 151.101.48.133\nConnecting to yangfangs.github.io (yangfangs.github.io)|151.101.48.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 1810 (1.8K) [application/octet-stream]\nSaving to: \u2018highly_conserved_protein_loki.tar.gz\u2019\n\nhighly_conserved_protein_lok 100%[==============================================\n]   1.77K  --.-KB/s    in 0s      \n\n2016-10-30 16:36:50 (623 MB/s) - \u2018highly_conserved_protein_loki.tar.gz\u2019 saved [1810/1810]\n\n\n\n\n$ tar -zxvf highly_conserved_protein_loki.tar.gz\n\nhighly_conserved_protein_loki/\nhighly_conserved_protein_loki/p1.fasta\nhighly_conserved_protein_loki/p2.fasta\nhighly_conserved_protein_loki/p3.fasta\nhighly_conserved_protein_loki/p4.fasta\nhighly_conserved_protein_loki/p5.fasta\nhighly_conserved_protein_loki/p6.fasta\n\n$ cd extend_pro_loki\n$ ls\np1.fasta  p2.fasta  p3.fasta  p4.fasta  p5.fasta  p6.fast\n\n$ cat p1.fasta \n\nloki\nMKVDDNLLKQSLNAAIDFSVRKKEGFKDRVRKFDETIDLIINIKDVNLNDPKNRIDKEII\nLTNEIVEEEKLNICVIASGEILLEAKKAGVETLDRDALIKLNNEEKKHKKKFAKKYEFFI\nVEDKMMRDVARYLARFLGPLGKMPKPFPTGYGIISSPGDLRTAVERYKKVIRIQMKKQPI\nIFAKIGKKSMEIDRLFDNMKTVIDFIADQMPHKFNNFKSMYLKSSMGKPIKVTEEFLKSL\nEV\n\n\n\n\n3. Insert loki to the tree-of-life\n\n\n$ PhySpeTree autobuild -i 191speciesnames.txt -o extend_pro_loki -e highly_conserved_protein_loki --ehcp -t 6\nLoading organisms names success.....\n\nThe result are store in:extend_pro_loki\n\nNow loading data and constructing phylogenetic tree......\n2016-10-30 18:19:53,951 Checking organisms INFO: The species: ges can't match in KEGG protein index database\n2016-10-30 18:19:53,951 Checking organisms WARNING: These species can't match in KEGG protein index database so removed and reconstruct phylogenetic tree.\n2016-10-30 18:19:53,951 KEGG INDEX DB INFO: Read organisms names success\n2016-10-30 18:20:18,870 KEGG INDEX DB INFO: Retrieve and download of highly conserved protein 'Ribosomal protein L1' was successful store in p1.fasta file\n2016-10-30 18:20:46,573 KEGG INDEX DB INFO: Retrieve and download of highly conserved protein 'Leucyl-tRNA synthetase' was successful store in p2.fasta file\n2016-10-30 18:21:11,401 KEGG INDEX DB INFO: Retrieve and download of highly conserved protein 'Ribosomal protein L14' was successful store in p3.fasta file\n2016-10-30 18:21:36,078 KEGG INDEX DB INFO: Retrieve and download of highly conserved protein 'Ribosomal protein L5' was successful store in p4.fasta file\n2016-10-30 18:22:00,454 KEGG INDEX DB INFO: Retrieve and download of highly conserved protein 'Ribosomal protein S7' was successful store in p5.fasta file\n2016-10-30 18:22:27,895 KEGG INDEX DB INFO: Retrieve and download of highly conserved protein 'Arginyl-tRNA synthetase' was successful store in p6.fasta file\n2016-10-30 18:22:27,895 KEGG INDEX DB INFO: Retrieve from KEGG database 6 highly conserved proteins\n......\n\n\n\n\n4. Annotate and view the tree", 
            "title": "Tutorial"
        }, 
        {
            "location": "/tutorial/#physpetree-tutorial", 
            "text": "", 
            "title": "PhySpeTree Tutorial"
        }, 
        {
            "location": "/tutorial/#automatically-reconstruct-the-tree-of-life", 
            "text": "Here we show how to use PhySpeTree to reconstruct tree-of-life (191 organisms) by two methods (HCP and SSU rRNA).", 
            "title": "Automatically reconstruct the tree-of-life"
        }, 
        {
            "location": "/tutorial/#reconstruct-the-tree-of-life-by-the-hcp-method", 
            "text": "Concept   The main concept of the HCP method is to concatenate highly conserved proteins into a supermatrix and then build species tree. Here we prepared  31 classes of HCP  to build the tree.", 
            "title": "Reconstruct the tree-of-life by the HCP method"
        }, 
        {
            "location": "/tutorial/#1-prepare-input-species", 
            "text": "Download 191  KEGG  abbreviated species names:  $ wget  https://yangfangs.github.io/physpetools/example/191speciesnames.txt \n\n--2016-10-30 15:26:06--  https://yangfangs.github.io/physpetools/example/191speciesnames.txt\nResolving yangfangs.github.io (yangfangs.github.io)... 151.101.48.133\nConnecting to yangfangs.github.io (yangfangs.github.io)|151.101.48.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 773 [text/plain]\nSaving to: \u2018191speciesnames.txt\u2019\n\n191speciesnames.txt          100%[============================================== ]     773  --.-KB/s    in 0s      \n\n$ cat 191speciesnames.txt \nneq\npai\nape\nsto\nssoa\ntvo\ntac\nafu\n.....", 
            "title": "1. Prepare input species"
        }, 
        {
            "location": "/tutorial/#2-reconstruct-the-species-tree", 
            "text": "Use  --hcp  option to specify the HCP method.  $ PhySpeTree autobuild -i 191speciesnames.txt -o 191_pro --hcp\n\nLoading organisms names success.....\n\nThe result are store in:191_pro\n\nNow loading data and constructing phylogenetic tree......\n2016-10-30 15:32:07,894 Checking organisms INFO: The species: ges can't match in KEGG protein index database\n2016-10-30 15:32:07,894 Checking organisms WARNING: These species can't match in KEGG protein index database so removed and reconstruct phylogenetic tree.\n2016-10-30 15:32:07,894 KEGG INDEX DB INFO: Read organisms names success\n2016-10-30 15:32:34,213 KEGG INDEX DB INFO: Retrieve and download of highly conserved protein 'Ribosomal protein L1' was successful store in p1.fasta file\n2016-10-30 15:33:00,679 KEGG INDEX DB INFO: Retrieve and download of highly conserved protein 'Leucyl-tRNA synthetase' was successful store in p2.fasta file\n2016-10-30 15:33:25,052 KEGG INDEX DB INFO: Retrieve and download of highly conserved protein 'Ribosomal protein L14' was successful store in p3.fasta file\n2016-10-30 15:33:49,649 KEGG INDEX DB INFO: Retrieve and download of highly conserved protein 'Ribosomal protein L5' was successful store in p4.fasta file\n2016-10-30 15:34:14,510 KEGG INDEX DB INFO: Retrieve and download of highly conserved protein 'Ribosomal protein S7' was successful store in p5.fasta file\n2016-10-30 15:34:41,123 KEGG INDEX DB INFO: Retrieve and download of highly conserved protein 'Arginyl-tRNA synthetase' was successful store in p6.fasta file\n2016-10-30 15:34:41,123 KEGG INDEX DB INFO: Retrieve from KEGG database 6 highly conserved proteins\n......", 
            "title": "2. Reconstruct the species tree"
        }, 
        {
            "location": "/tutorial/#3-get-the-output-tree", 
            "text": "", 
            "title": "3. Get the output tree"
        }, 
        {
            "location": "/tutorial/#4-annotate-and-view-the-tree", 
            "text": "PhySpeTree provides the  iview  module to annotate trees with taxonomic information. The output configure files can be directly used in iTOL, which is a very popular online tool for the display, annotation, and management of phylogenetic trees.  Use the  --labels  option to change abbreviated species names to full names:  $ PhySpeTree iview -i 191speciesnames.txt --labels\nChange abbreviation names to full names complete\nchange labels file was save in iview/labels.txt\n\n$ cd iview\n\n$ cat labels.txt \nLABELS\nSEPARATOR TAB\nDATA\nneq     Nanoarchaeum equitans\npai     Pyrobaculum aerophilum\nape     Aeropyrum pernix\nsto     Sulfolobus tokodaii\nssoa    Sulfolobus solfataricus SULA\ntvo     Thermoplasma volcanium\ntac     Thermoplasma acidophilum\nafu     Archaeoglobus fulgidus DSM 4304\nhal     Halobacterium sp. NRC-1\nmac     Methanosarcina acetivorans\nmma     Methanosarcina mazei Go1\npfu     Pyrococcus furiosus DSM 3638\npho     Pyrococcus horikoshii\npab     Pyrococcus abyssi\nmth     Methanothermobacter thermautotrophicus\nmka     Methanopyrus kandleri\nmmp     Methanococcus maripaludis S2\n.....    Use the  -a  option to color branch ranges by phylum (default):   $ PhySpeTree iview -i 191speciesnames.txt -o iview --range -a phylum\nColor range by phylum was complete.\nColor range annotation was save in iview/range_color_by_phylum.txt\n\n$ cd iview\n\n$ cat range_color_by_phylum.txt \nTREE_COLORS\nSEPARATOR TAB\nDATA\nneq     range   #996433 Archaea\npai     range   #996433 Archaea\nape     range   #996433 Archaea\nsto     range   #996433 Archaea\nssoa    range   #996433 Archaea\ntvo     range   #996433 Archaea\ntac     range   #996433 Archaea\nafu     range   #996433 Archaea\nhal     range   #996433 Archaea\nmac     range   #996433 Archaea\nmma     range   #996433 Archaea\npfu     range   #996433 Archaea\npho     range   #996433 Archaea\npab     range   #996433 Archaea\nmth     range   #996433 Archaea\nmka     range   #996433 Archaea\nmmp     range   #996433 Archaea\nmja     range   #996433 Archaea\n.....", 
            "title": "4. Annotate and view the tree"
        }, 
        {
            "location": "/tutorial/#reconstruct-the-tree-of-life-by-the-ssu-rrna-method", 
            "text": "Concept   PhySpeTree provides  --srna  option to reconstruct species trees by the SSU rRNA method. The concept of this method is to align SSU rRNA sequences and then reconstruct the specie tree.", 
            "title": "Reconstruct the tree-of-life by the SSU rRNA method"
        }, 
        {
            "location": "/tutorial/#1-prepare-input-species_1", 
            "text": "$ wget  https://yangfangs.github.io/physpetools/example/191speciesnames.txt \n\n--2016-10-30 15:26:06--  https://yangfangs.github.io/physpetools/example/191speciesnames.txt\nResolving yangfangs.github.io (yangfangs.github.io)... 151.101.48.133\nConnecting to yangfangs.github.io (yangfangs.github.io)|151.101.48.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 773 [text/plain]\nSaving to: \u2018191speciesnames.txt\u2019\n\n$ cat 191speciesnames.txt \nneq\npai\nape\nsto\nssoa\ntvo\ntac\nafu\n.....", 
            "title": "1. Prepare input species"
        }, 
        {
            "location": "/tutorial/#2-reconstruct-the-species-tree_1", 
            "text": "$ PhySpeTree autobuild -i 191speciesnames.txt -o 191_rna --srna\nLoading organisms names success.....\n\nThe result are store in:191_rna\n\nNow loading data and constructing phylogenetic tree......\n2016-10-30 15:40:17,107 Checking organisms INFO: The organism: neq can't match in SSU rRNA database\n2016-10-30 15:40:17,107 Checking organisms INFO: The organism: ape can't match in SSU rRNA database\n2016-10-30 15:40:17,107 Checking organisms INFO: The organism: tac can't match in SSU rRNA database\n2016-10-30 15:40:17,107 Checking organisms INFO: The organism: mmp can't match in SSU rRNA database\n2016-10-30 15:40:17,107 Checking organisms INFO: The organism: gla can't match in SSU rRNA database\n2016-10-30 15:40:17,107 Checking organisms INFO: The organism: tps can't match in SSU rRNA database\n2016-10-30 15:40:17,107 Checking organisms INFO: The organism: cho can't match in SSU rRNA database\n2016-10-30 15:40:17,107 Checking organisms INFO: The organism: ddi can't match in SSU rRNA database\n2016-10-30 15:40:17,107 Checking organisms INFO: The organism: spo can't match in SSU rRNA database\n2016-10-30 15:40:17,107 Checking organisms INFO: The organism: aga can't match in SSU rRNA database\n2016-10-30 15:40:17,107 Checking organisms INFO: The organism: tru can't match in SSU rRNA database\n2016-10-30 15:40:17,107 Checking organisms INFO: The organism: mpu can't match in SSU rRNA database\n2016-10-30 15:40:17,107 Checking organisms INFO: The organism: lin can't match in SSU rRNA database\n2016-10-30 15:40:17,107 Checking organisms INFO: The organism: ban can't match in SSU rRNA database\n2016-10-30 15:40:17,107 Checking organisms INFO: The organism: bce can't match in SSU rRNA database\n2016-10-30 15:40:17,108 Checking organisms INFO: The organism: ljo can't match in SSU rRNA database\n2016-10-30 15:40:17,108 Checking organisms INFO: The organism: san can't match in SSU rRNA database\n2016-10-30 15:40:17,108 Checking organisms INFO: The organism: spg can't match in SSU rRNA database\n2016-10-30 15:40:17,108 Checking organisms INFO: The organism: ges can't match in SSU rRNA database\n2016-10-30 15:40:17,108 Checking organisms INFO: The organism: lis can't match in SSU rRNA database\n2016-10-30 15:40:17,108 Checking organisms INFO: The organism: sco can't match in SSU rRNA database\n2016-10-30 15:40:17,108 Checking organisms INFO: The organism: cdi can't match in SSU rRNA database\n2016-10-30 15:40:17,108 Checking organisms INFO: The organism: mle can't match in SSU rRNA database\n2016-10-30 15:40:17,108 Checking organisms INFO: The organism: wsu can't match in SSU rRNA database\n2016-10-30 15:40:17,108 Checking organisms INFO: The organism: rpr can't match in SSU rRNA database\n2016-10-30 15:40:17,108 Checking organisms INFO: The organism: bpe can't match in SSU rRNA database\n2016-10-30 15:40:17,108 Checking organisms INFO: The organism: bpa can't match in SSU rRNA database\n2016-10-30 15:40:17,108 Checking organisms INFO: The organism: ppr can't match in SSU rRNA database\n2016-10-30 15:40:17,108 Checking organisms WARNING: These species can't match in SSU rRNA database so removing and reconstructing phylogenetic tree.\n2016-10-30 15:40:17,108 SSU rRNA DB INFO: Read organisms names success\n2016-10-30 15:40:24,505 SSU rRNA DB INFO: Retrieve and download of organism 'pai' SSU rRNA sequence was successful\n2016-10-30 15:40:26,960 SSU rRNA DB INFO: Retrieve and download of organism 'sto' SSU rRNA sequence was successful\n2016-10-30 15:40:29,313 SSU rRNA DB INFO: Retrieve and download of organism 'ssoa' SSU rRNA sequence was successful\n2016-10-30 15:40:32,387 SSU rRNA DB INFO: Retrieve and download of organism 'tvo' SSU rRNA sequence was successful\n2016-10-30 15:40:35,158 SSU rRNA DB INFO: Retrieve and download of organism 'afu' SSU rRNA sequence was successful\n2016-10-30 15:40:37,507 SSU rRNA DB INFO: Retrieve and download of organism 'hal' SSU rRNA sequence was successful\n2016-10-30 15:40:41,282 SSU rRNA DB INFO: Retrieve and download of organism 'mac' SSU rRNA sequence was successful\n......", 
            "title": "2. Reconstruct the species tree"
        }, 
        {
            "location": "/tutorial/#3-get-the-output-tree_1", 
            "text": "", 
            "title": "3. Get the output tree"
        }, 
        {
            "location": "/tutorial/#4-annotate-and-view-the-tree_1", 
            "text": "Use the  --labels  option to change abbreviated species names to full names:  $ PhySpeTree iview -i 191speciesnames.txt --labels\nChange abbreviation names to full names complete\nchange labels file was save in iview/labels.txt\n\n$ cd iview\n\n$ cat labels.txt \nLABELS\nSEPARATOR TAB\nDATA\nneq     Nanoarchaeum equitans\npai     Pyrobaculum aerophilum\nape     Aeropyrum pernix\nsto     Sulfolobus tokodaii\nssoa    Sulfolobus solfataricus SULA\ntvo     Thermoplasma volcanium\ntac     Thermoplasma acidophilum\nafu     Archaeoglobus fulgidus DSM 4304\nhal     Halobacterium sp. NRC-1\nmac     Methanosarcina acetivorans\nmma     Methanosarcina mazei Go1\npfu     Pyrococcus furiosus DSM 3638\npho     Pyrococcus horikoshii\npab     Pyrococcus abyssi\nmth     Methanothermobacter thermautotrophicus\nmka     Methanopyrus kandleri\nmmp     Methanococcus maripaludis S2\n.....   Color branch ranges by phylum:  $ PhySpeTree iview -i 191speciesnames.txt -o iview --range -a phylum\nColor range by phylum was complete.\nColor range annotation was save in iview/range_color_by_phylum.txt\n\n$ cd iview\n\n$ cat range_color_by_phylum.txt \nTREE_COLORS\nSEPARATOR TAB\nDATA\nneq     range   #996433 Archaea\npai     range   #996433 Archaea\nape     range   #996433 Archaea\nsto     range   #996433 Archaea\nssoa    range   #996433 Archaea\ntvo     range   #996433 Archaea\ntac     range   #996433 Archaea\nafu     range   #996433 Archaea\nhal     range   #996433 Archaea\nmac     range   #996433 Archaea\nmma     range   #996433 Archaea\npfu     range   #996433 Archaea\npho     range   #996433 Archaea\npab     range   #996433 Archaea\nmth     range   #996433 Archaea\nmka     range   #996433 Archaea\nmmp     range   #996433 Archaea\nmja     range   #996433 Archaea\n.....   Color branch ranges by class:  $ PhySpeTree iview -i 191speciesnames.txt --range -a class\nColor range by class was complete.\nColor range annotation was save in iview/range_color_by_class.txt\n\n$ cd iview\n\n$ cat range_color_by_class.txt \nTREE_COLORS\nSEPARATOR TAB\nDATA\nneq     range   #4A959E Nanoarchaeota\npai     range   #58CD80 Crenarchaeota\nape     range   #58CD80 Crenarchaeota\nsto     range   #58CD80 Crenarchaeota\nssoa    range   #58CD80 Crenarchaeota\ntvo     range   #639BB0 Euryarchaeota\ntac     range   #639BB0 Euryarchaeota\nafu     range   #639BB0 Euryarchaeota\nhal     range   #639BB0 Euryarchaeota\nmac     range   #639BB0 Euryarchaeota\nmma     range   #639BB0 Euryarchaeota\npfu     range   #639BB0 Euryarchaeota\npho     range   #639BB0 Euryarchaeota\npab     range   #639BB0 Euryarchaeota\nmth     range   #639BB0 Euryarchaeota\nmka     range   #639BB0 Euryarchaeota\nmmp     range   #639BB0 Euryarchaeota\nmja     range   #639BB0 Euryarchaeota\ngla     range   #C5D49E Diplomonads\nlma     range   #899DDB Euglenozoa\ntps     range   #7DD2ED Stramenopiles\ncho     range   #99A01A Alveolates\n.....", 
            "title": "4. Annotate and view the tree"
        }, 
        {
            "location": "/tutorial/#automatically-reconstruct-plantae-species-tree", 
            "text": "Here we use PhySpeTree to automatically reconstructed 52 plants species tree by the HCP method.", 
            "title": "Automatically reconstruct Plantae species tree"
        }, 
        {
            "location": "/tutorial/#1-prepare-input-species_2", 
            "text": "$ wget  https://yangfangs.github.io/physpetools/example/52plantsnames.txt \n\n--2016-10-30 15:44:25--  https://yangfangs.github.io/physpetools/example/52plantsnames.txt\nResolving yangfangs.github.io (yangfangs.github.io)... 151.101.48.133\nConnecting to yangfangs.github.io (yangfangs.github.io)|151.101.48.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 211 [text/plain]\nSaving to: \u201852plantsnames.txt\u2019\n\n52plantsnames.txt            100%[============================================== ]     211  --.-KB/s    in 0s      \n\n2016-10-30 15:44:27 (120 MB/s) - \u201852plantsnames.txt\u2019 saved [211/211]\n\n$ cat 52plantsnames.txt\naly\nath\natr\nbdi\nbpg\nbrp\nbvg\ncam\nccp\ncic\ncit\ncme\ncmo\n.....", 
            "title": "1. Prepare input species"
        }, 
        {
            "location": "/tutorial/#2-reconstruct-the-plantae-species-tree", 
            "text": "$ PhySpeTree autobuild -i 52plantsnames.txt -o 52plant_pro --hcp -t 6\n\nLoading organisms names success.....\n\nThe result are store in:52plant_pro\n\nNow loading data and constructing phylogenetic tree......\n2016-10-30 15:48:23,420 KEGG INDEX DB INFO: Read organisms names success\n2016-10-30 15:48:36,020 KEGG INDEX DB INFO: Retrieve and download of highly conserved protein 'Leucyl-tRNA synthetase' was successful store in p1.fasta file\n2016-10-30 15:48:42,369 KEGG INDEX DB INFO: Retrieve and download of highly conserved protein 'Metal-dependent proteases with chaperone activity' was successful store in p2.fasta file\n2016-10-30 15:48:46,774 KEGG INDEX DB INFO: Retrieve and download of highly conserved protein 'Phenylalanine-tRNA synthethase alpha subunit' was successful store in p3.fasta file\n2016-10-30 15:48:50,559 KEGG INDEX DB INFO: Retrieve and download of highly conserved protein 'Preprotein translocase subunit SecY' was successful store in p4.fasta file\n2016-10-30 15:48:54,153 KEGG INDEX DB INFO: Retrieve and download of highly conserved protein 'Ribosomal protein L15' was successful store in p5.fasta file\n2016-10-30 15:48:57,631 KEGG INDEX DB INFO: Retrieve and download of highly conserved protein 'Ribosomal protein L16/L10E' was successful store in p6.fasta file\n2016-10-30 15:49:01,311 KEGG INDEX DB INFO: Retrieve and download of highly conserved protein 'Ribosomal protein L18' was successful store in p7.fasta file\n2016-10-30 15:49:09,038 KEGG INDEX DB INFO: Retrieve and download of highly conserved protein 'Ribosomal protein L22' was successful store in p8.fasta file\n2016-10-30 15:49:18,417 KEGG INDEX DB INFO: Retrieve and download of highly conserved protein 'Ribosomal protein L3' was successful store in p9.fasta file\n2016-10-30 15:49:24,771 KEGG INDEX DB INFO: Retrieve and download of highly conserved protein 'Ribosomal protein L5' was successful store in p10.fasta file\n2016-10-30 15:49:31,840 KEGG INDEX DB INFO: Retrieve and download of highly conserved protein 'Ribosomal protein L6P/L9E' was successful store in p11.fasta file\n2016-10-30 15:49:36,652 KEGG INDEX DB INFO: Retrieve and download of highly conserved protein 'Ribosomal protein S11' was successful store in p12.fasta file\n2016-10-30 15:49:41,464 KEGG INDEX DB INFO: Retrieve and download of highly conserved protein 'Ribosomal protein S15P/S13E' was successful store in p13.fasta file\n2016-10-30 15:49:46,272 KEGG INDEX DB INFO: Retrieve and download of highly conserved protein 'Ribosomal protein S17' was successful store in p14.fasta file\n2016-10-30 15:49:51,186 KEGG INDEX DB INFO: Retrieve and download of highly conserved protein 'Ribosomal protein S2' was successful store in p15.fasta file\n2016-10-30 15:50:04,278 KEGG INDEX DB INFO: Retrieve and download of highly conserved protein 'Ribosomal protein S8' was successful store in p16.fasta file\n2016-10-30 15:50:13,914 KEGG INDEX DB INFO: Retrieve and download of highly conserved protein 'Seryl-tRNA synthetase' was successful store in p17.fasta file\n2016-10-30 15:50:19,753 KEGG INDEX DB INFO: Retrieve and download of highly conserved protein 'Ribosomal protein S13' was successful store in p18.fasta file\n2016-10-30 15:50:19,753 KEGG INDEX DB INFO: Retrieve from KEGG database 18 highly conserved proteins\n......", 
            "title": "2. Reconstruct the Plantae species tree"
        }, 
        {
            "location": "/tutorial/#3-get-the-output-tree_2", 
            "text": "", 
            "title": "3. Get the output tree"
        }, 
        {
            "location": "/tutorial/#4-annotate-and-view-the-tree_2", 
            "text": "Use the  --labels  option to change abbreviated species names to full names:  $ PhySpeTree iview -i 52plantsnames.txt --labels\nChange abbreviation names to full names complete\nchange labels file was save in iview/labels.txt\n\n$ cd iview\n\n$ cat labels.txt \nLABELS\nSEPARATOR TAB\nDATA\naly     Arabidopsis lyrata (lyrate rockcress)\nath     Arabidopsis thaliana (thale cress)\natr     Amborella trichopoda\nbdi     Brachypodium distachyon\nbpg     Bathycoccus prasinos\nbrp     Brassica rapa (field mustard)\nbvg     Beta vulgaris (sugar beet)\ncam     Cicer arietinum (chickpea)\nccp     Chondrus crispus (carragheen)\ncic     Citrus clementina (mandarin orange)\ncit     Citrus sinensis (Valencia orange)\ncme     Cyanidioschyzon merolae\ncmo     Cucumis melo (muskmelon)\ncrb     Capsella rubella\ncre     Chlamydomonas reinhardtii\ncsl     Coccomyxa subellipsoidea\ncsv     Cucumis sativus (cucumber)\ncvr     Chlorella variabilis\n.....   Color branch ranges by class:  $ PhySpeTree iview -i 52plantsnames.txt -o iview --range -a phylum\nColor range by class was complete.\nColor range annotation was save in iview/range_color_by_class.txt\n$ cd iview\n\n$ cat range_color_by_class.txt \nTREE_COLORS\nSEPARATOR TAB\nDATA\naly     range   #1C748D Eudicots\nath     range   #1C748D Eudicots\natr     range   #C4DE94 Basal Magnoliophyta\nbdi     range   #854B9F Monocots\nbpg     range   #784CE5 Green algae\nbrp     range   #1C748D Eudicots\nbvg     range   #1C748D Eudicots\ncam     range   #1C748D Eudicots\nccp     range   #CEDDB3 Red algae\ncic     range   #1C748D Eudicots\ncit     range   #1C748D Eudicots\ncme     range   #CEDDB3 Red algae\ncmo     range   #1C748D Eudicots\ncrb     range   #1C748D Eudicots\ncre     range   #784CE5 Green algae\ncsl     range   #784CE5 Green algae\n.....", 
            "title": "4. Annotate and view the tree"
        }, 
        {
            "location": "/tutorial/#extend-species-tree-with-new-organisms", 
            "text": "Here we show how to use PhySpeTree to expand insert a a pre-built species tree with new organisms. We insert the newly identified organism  Lokiarchaeum sp. GC14_75  (loki) to the tree-of-life.", 
            "title": "Extend species tree with new organisms"
        }, 
        {
            "location": "/tutorial/#extend-species-tree-by-the-ssu-rrna-method", 
            "text": "Concept", 
            "title": "Extend species tree by the SSU rRNA method"
        }, 
        {
            "location": "/tutorial/#1-manually-prepare-the-ssu-rrna-sequence", 
            "text": "We prepare the SSU rRNA sequence of loki and save it in a FASTA format file, for example  extend_rna_olki.fasta .  Download the example file:  $ wget  https://yangfangs.github.io/physpetools/example/extend_rna_loki.fasta \n\n--2016-10-30 15:54:38--  https://yangfangs.github.io/physpetools/example/extend_rna_loki.fasta\nResolving yangfangs.github.io (yangfangs.github.io)... 151.101.24.133\nConnecting to yangfangs.github.io (yangfangs.github.io)|151.101.24.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 1200 (1.2K) [application/octet-stream]\nSaving to: \u2018extend_rna_loki.fasta\u2019\n\nextend_rna_loki.fasta        100%[============================================== ]   1.17K  --.-KB/s    in 0s      \n\n2016-10-30 15:54:39 (553 MB/s) - \u2018extend_rna_loki.fasta\u2019 saved [1200/1200]  check:  $ cat extend_rna_olki.fasta loki\nGAGAUGGGUACUGAGACAACGACCCAGGCCUUACGAGGCGCAGCAGGCGCGAAACCUCCGCAAUACACGAAAGUGUGACG\nGGGUUACCCAAAGUGUUCAAUUAUGAACUGUGGUAGGUGAGUAAUGUUCCCUACUAGAAAGGAGAGGGCAAGGCUGGUGC\nCAGCCGCCGCGGUAAAACCAGCUCUUCAAGUGGUCGGGAUAAUUAUUGGGCUUAAAGUGUCCGUAGCCGGUUUAGUAAGU\nUCCUGGUAAAAUCGGGUAGCUUAACUAUCUGUAUGCUAGGAAUACUGCUAUACUAGAGGACGGGAGAGGUCUGAGGUACU\nACAGGGGUAGGGGUGAAAUCUUAUAAUCCUUGUAGGACCACCAGUGGCGAAGGCGUCAGACUGGAACGUGCCUGACGGUG\nAGGGACGAAAGCCAGGGGAGCGAACCGGAUUAGAUACCCGGGUAGUCCUGGCCGUAAACGAUGCAUACUAGGUGAUGGCA\nUGGCCAUGAGCCAUGUCAGUGCCGUAGGGAAACCGUUAAGUGUGCCGCCUGGGAAGUACGGUCGCAAGGCUAAAACUUAA\nAGGAAUUGGCGGGGGAGCACCACAAGGGGUGAAGCCUGCGGUUCAAUUGGACUCAACGCCGGGAAACUUACCAGGGGAGA\nCAGCAGAAUGAUGGUCAGGUUGACGACCUUACCUGACAAGCUGAGAGGAGGUGCAUGGCCGUCGCCAGUUCGUGCUGUGA\nGGUAUCCUGUUAAGUCAGGCAACGAACGAGAUCCGCACCUUUAUUUGCCAGCAAGAAGUCACGACUUCGUUGGGAACACU\nAAAGGGACCGCCGUCGAUAAGACGGAGGAAGGAGCGGGCAAAGGCAGGUCAGUAUGCCCCGAAACCCCUGGGCUACACGC\nGGGCUGCAAUGGUAUGAACAAUGGGCUGUAACUCCGAAAGGAGAAACCAAUCCCGAAAUCAUAUCUCAGUGGGAAUUGUC\nGGCUGUAACCCGCCGACAUGAACGUGGAAUCCCUAGUAAUCGUGUGUCAUCAUCGCACGGUGAAUACGUCUCUGCUCCUU\nGCACACACCGCCCGUCGCUCCAUCCGAGUGUGCUAAAAAUGAGGUAUGGUCAGUCUGGUCGUAUCGAAUUUCUAGUAUGC\nGAGGGGGGAGAAGUCGUAACAAGGUAGCCGUAGGGGAACCUGCGGCUGGAUCACCUCCU", 
            "title": "1. Manually prepare the SSU rRNA sequence"
        }, 
        {
            "location": "/tutorial/#2-insert-loki-to-the-tree-of-life", 
            "text": "Update the tree-of-life by combining the  --esrna  and  -e  options.  $ PhySpeTree autobuild -i 191speciesnames.txt -o extend_rna -e extend_rna_loki.fasta --esrna -t 6\n\nLoading organisms names success.....\n\nThe result are store in:extend_rna\n\nNow loading data and constructing phylogenetic tree......\n2016-10-30 16:10:01,551 Checking organisms INFO: The organism: neq can't match in SSU rRNA database\n2016-10-30 16:10:01,551 Checking organisms INFO: The organism: ape can't match in SSU rRNA database\n2016-10-30 16:10:01,551 Checking organisms INFO: The organism: tac can't match in SSU rRNA database\n2016-10-30 16:10:01,551 Checking organisms INFO: The organism: mmp can't match in SSU rRNA database\n2016-10-30 16:10:01,551 Checking organisms INFO: The organism: gla can't match in SSU rRNA database\n2016-10-30 16:10:01,551 Checking organisms INFO: The organism: tps can't match in SSU rRNA database\n2016-10-30 16:10:01,551 Checking organisms INFO: The organism: cho can't match in SSU rRNA database\n2016-10-30 16:10:01,551 Checking organisms INFO: The organism: ddi can't match in SSU rRNA database\n2016-10-30 16:10:01,551 Checking organisms INFO: The organism: spo can't match in SSU rRNA database\n2016-10-30 16:10:01,552 Checking organisms INFO: The organism: aga can't match in SSU rRNA database\n2016-10-30 16:10:01,552 Checking organisms INFO: The organism: tru can't match in SSU rRNA database\n2016-10-30 16:10:01,552 Checking organisms INFO: The organism: mpu can't match in SSU rRNA database\n2016-10-30 16:10:01,552 Checking organisms INFO: The organism: lin can't match in SSU rRNA database\n2016-10-30 16:10:01,552 Checking organisms INFO: The organism: ban can't match in SSU rRNA database\n2016-10-30 16:10:01,552 Checking organisms INFO: The organism: bce can't match in SSU rRNA database\n2016-10-30 16:10:01,552 Checking organisms INFO: The organism: ljo can't match in SSU rRNA database\n2016-10-30 16:10:01,552 Checking organisms INFO: The organism: san can't match in SSU rRNA database\n2016-10-30 16:10:01,552 Checking organisms INFO: The organism: spg can't match in SSU rRNA database\n2016-10-30 16:10:01,552 Checking organisms INFO: The organism: ges can't match in SSU rRNA database\n2016-10-30 16:10:01,552 Checking organisms INFO: The organism: lis can't match in SSU rRNA database\n2016-10-30 16:10:01,552 Checking organisms INFO: The organism: sco can't match in SSU rRNA database\n2016-10-30 16:10:01,552 Checking organisms INFO: The organism: cdi can't match in SSU rRNA database\n2016-10-30 16:10:01,552 Checking organisms INFO: The organism: mle can't match in SSU rRNA database\n2016-10-30 16:10:01,552 Checking organisms INFO: The organism: wsu can't match in SSU rRNA database\n2016-10-30 16:10:01,552 Checking organisms INFO: The organism: rpr can't match in SSU rRNA database\n2016-10-30 16:10:01,552 Checking organisms INFO: The organism: bpe can't match in SSU rRNA database\n2016-10-30 16:10:01,552 Checking organisms INFO: The organism: bpa can't match in SSU rRNA database\n2016-10-30 16:10:01,552 Checking organisms INFO: The organism: ppr can't match in SSU rRNA database\n2016-10-30 16:10:01,552 Checking organisms WARNING: These species can't match in SSU rRNA database so removing and reconstructing phylogenetic tree.\n2016-10-30 16:10:01,552 SSU rRNA DB INFO: Read organisms names success\n2016-10-30 16:10:02,263 SSU rRNA DB INFO: Retrieve and download of organism 'pai' SSU rRNA sequence was successful\n2016-10-30 16:10:02,468 SSU rRNA DB INFO: Retrieve and download of organism 'sto' SSU rRNA sequence was successful\n2016-10-30 16:10:02,672 SSU rRNA DB INFO: Retrieve and download of organism 'ssoa' SSU rRNA sequence was successful\n2016-10-30 16:10:02,878 SSU rRNA DB INFO: Retrieve and download of organism 'tvo' SSU rRNA sequence was successful\n2016-10-30 16:10:04,408 SSU rRNA DB INFO: Retrieve and download of organism 'afu' SSU rRNA sequence was successful\n2016-10-30 16:10:04,615 SSU rRNA DB INFO: Retrieve and download of organism 'hal' SSU rRNA sequence was successful\n2016-10-30 16:10:05,085 SSU rRNA DB INFO: Retrieve and download of organism 'mac' SSU rRNA sequence was successful\n2016-10-30 16:10:05,638 SSU rRNA DB INFO: Retrieve and download of organism 'mma' SSU rRNA sequence was successful\n2016-10-30 16:10:05,841 SSU rRNA DB INFO: Retrieve and download of organism 'pfu' SSU rRNA sequence was successful\n2016-10-30 16:10:06,086 SSU rRNA DB INFO: Retrieve and download of organism 'pho' SSU rRNA sequence was successful\n2016-10-30 16:10:06,590 SSU rRNA DB INFO: Retrieve and download of organism 'pab' SSU rRNA sequence was successful\n2016-10-30 16:10:07,100 SSU rRNA DB INFO: Retrieve and download of organism 'mth' SSU rRNA sequence was successful\n2016-10-30 16:10:07,303 SSU rRNA DB INFO: Retrieve and download of organism 'mka' SSU rRNA sequence was successful\n.....", 
            "title": "2. Insert loki to the tree-of-life"
        }, 
        {
            "location": "/tutorial/#3-annotate-and-view-the-tree", 
            "text": "", 
            "title": "3. Annotate and view the tree"
        }, 
        {
            "location": "/tutorial/#extend-species-tree-by-the-hcp-method", 
            "text": "Concept", 
            "title": "Extend species tree by the HCP method"
        }, 
        {
            "location": "/tutorial/#1-identify-classes-of-hcp", 
            "text": "Use the  check  module to identify what classes of HCP should be prepapred.  $ PhySpeTree check -i 191speciesnames.txt --ehcp\n'Ribosomal protein L1' ----------------------------------  p1.fasta\n\n'Leucyl-tRNA synthetase' ----------------------------------  p2.fasta\n\n'Ribosomal protein L14' ----------------------------------  p3.fasta\n\n'Ribosomal protein L5' ----------------------------------  p4.fasta\n\n'Ribosomal protein S7' ----------------------------------  p5.fasta\n\n'Arginyl-tRNA synthetase' ----------------------------------  p6.fasta\n\nChecked extend highly conserved proteins is completed.\nChecked result was store in check/PhySpeTree_echp_extend.txt\n......", 
            "title": "1. Identify classes of HCP"
        }, 
        {
            "location": "/tutorial/#2-manually-prepare-hcp-sequences", 
            "text": "According to  check  results, we prepare 6 classes of HCP and store the sequences (p1 ~ p6) into FASTA format files, for example  highly_conserved_protein_loki  Download the example file:  $ wget  https://yangfangs.github.io/physpetools/example/highly_conserved_protein_loki.tar.gz \n\n--2016-10-30 16:36:48--  https://yangfangs.github.io/physpetools/example/highly_conserved_protein_loki.tar.gz\nResolving yangfangs.github.io (yangfangs.github.io)... 151.101.48.133\nConnecting to yangfangs.github.io (yangfangs.github.io)|151.101.48.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 1810 (1.8K) [application/octet-stream]\nSaving to: \u2018highly_conserved_protein_loki.tar.gz\u2019\n\nhighly_conserved_protein_lok 100%[============================================== ]   1.77K  --.-KB/s    in 0s      \n\n2016-10-30 16:36:50 (623 MB/s) - \u2018highly_conserved_protein_loki.tar.gz\u2019 saved [1810/1810]  $ tar -zxvf highly_conserved_protein_loki.tar.gz\n\nhighly_conserved_protein_loki/\nhighly_conserved_protein_loki/p1.fasta\nhighly_conserved_protein_loki/p2.fasta\nhighly_conserved_protein_loki/p3.fasta\nhighly_conserved_protein_loki/p4.fasta\nhighly_conserved_protein_loki/p5.fasta\nhighly_conserved_protein_loki/p6.fasta\n\n$ cd extend_pro_loki\n$ ls\np1.fasta  p2.fasta  p3.fasta  p4.fasta  p5.fasta  p6.fast\n\n$ cat p1.fasta  loki\nMKVDDNLLKQSLNAAIDFSVRKKEGFKDRVRKFDETIDLIINIKDVNLNDPKNRIDKEII\nLTNEIVEEEKLNICVIASGEILLEAKKAGVETLDRDALIKLNNEEKKHKKKFAKKYEFFI\nVEDKMMRDVARYLARFLGPLGKMPKPFPTGYGIISSPGDLRTAVERYKKVIRIQMKKQPI\nIFAKIGKKSMEIDRLFDNMKTVIDFIADQMPHKFNNFKSMYLKSSMGKPIKVTEEFLKSL\nEV", 
            "title": "2. Manually prepare HCP sequences"
        }, 
        {
            "location": "/tutorial/#3-insert-loki-to-the-tree-of-life", 
            "text": "$ PhySpeTree autobuild -i 191speciesnames.txt -o extend_pro_loki -e highly_conserved_protein_loki --ehcp -t 6\nLoading organisms names success.....\n\nThe result are store in:extend_pro_loki\n\nNow loading data and constructing phylogenetic tree......\n2016-10-30 18:19:53,951 Checking organisms INFO: The species: ges can't match in KEGG protein index database\n2016-10-30 18:19:53,951 Checking organisms WARNING: These species can't match in KEGG protein index database so removed and reconstruct phylogenetic tree.\n2016-10-30 18:19:53,951 KEGG INDEX DB INFO: Read organisms names success\n2016-10-30 18:20:18,870 KEGG INDEX DB INFO: Retrieve and download of highly conserved protein 'Ribosomal protein L1' was successful store in p1.fasta file\n2016-10-30 18:20:46,573 KEGG INDEX DB INFO: Retrieve and download of highly conserved protein 'Leucyl-tRNA synthetase' was successful store in p2.fasta file\n2016-10-30 18:21:11,401 KEGG INDEX DB INFO: Retrieve and download of highly conserved protein 'Ribosomal protein L14' was successful store in p3.fasta file\n2016-10-30 18:21:36,078 KEGG INDEX DB INFO: Retrieve and download of highly conserved protein 'Ribosomal protein L5' was successful store in p4.fasta file\n2016-10-30 18:22:00,454 KEGG INDEX DB INFO: Retrieve and download of highly conserved protein 'Ribosomal protein S7' was successful store in p5.fasta file\n2016-10-30 18:22:27,895 KEGG INDEX DB INFO: Retrieve and download of highly conserved protein 'Arginyl-tRNA synthetase' was successful store in p6.fasta file\n2016-10-30 18:22:27,895 KEGG INDEX DB INFO: Retrieve from KEGG database 6 highly conserved proteins\n......", 
            "title": "3. Insert loki to the tree-of-life"
        }, 
        {
            "location": "/tutorial/#4-annotate-and-view-the-tree_3", 
            "text": "", 
            "title": "4. Annotate and view the tree"
        }, 
        {
            "location": "/faq/", 
            "text": "1. What is the input of PhySpeTree?\n\n\nUsers only need to prepare a TXT file containing \nKEGG\n abbreviated species names. For example, \norganism_example_list\n.\n\n\n2. How to explain PhySpeTree outputs?\n\n\nPhySpeTree returns two folders, \nOutdata\n contains the output species tree and \ntemp\n includes temporary data. Files in \ntemp\n can be used to check the quality of outputs in each step. If HCP method (\n--hcp\n) is selected, the \ntemp\n folder includes:\n\n\n\n\nconserved_protein\n: highly conserved proteins retrieved from the KEGG database.\n\n\nalignment\n: aligned sequences.\n\n\nconcatenate\n: concatenated sequences and conserved blocks.\n\n\n\n\nIf SSU rRNA method (\n--srna\n) is selected, the \ntemp\n folder includes:\n\n\n\n\nrna_sequence\n: SSU rRNA sequences retrieved from the SILVA database.\n\n\nrna_alignment\n: aligned sequences and conserved blocks.\n\n\n\n\n3. What classes of HCP are selected?\n\n\nPhySpeTree uses 31 HCP without horizontal transferred genes according to Ciccarelli \net al.\n.\n\n\ncite:\n\n\n\n\nCiccarelli FD, Doerks T, Von Mering C, et al. Toward automatic reconstruction of a highly resolved tree of life[J]. science, 2006, 311(5765): 1283-1287.\n\n\n\n\nThe 31 HCP and corresponding KEGG KO number are shown in the following table:\n\n\n\n\n\n\n\n\nProtein Names\n\n\nEukaryotes KO\n\n\nProkaryotes KO\n\n\n\n\n\n\n\n\n\n\nDNA-directed RNA polymerase subunit alpha\n\n\nK03040\n\n\nK03040\n\n\n\n\n\n\nRibosomal protein L1\n\n\nK02865\n\n\nK02863\n\n\n\n\n\n\nLeucyl-tRNA synthetase\n\n\nK01869\n\n\nK01869\n\n\n\n\n\n\nMetal-dependent proteases with chaperone activity\n\n\nK01409\n\n\nK01409\n\n\n\n\n\n\nPhenylalanine-tRNA synthethase alpha subunit\n\n\nK01889\n\n\nK01889\n\n\n\n\n\n\nPredicted GTPase probable translation factor\n\n\nK06942\n\n\nK06942\n\n\n\n\n\n\nPreprotein translocase subunit SecY\n\n\nK10956\n\n\nK10956\n\n\n\n\n\n\nRibosomal protein L11\n\n\nK02868\n\n\nK02867\n\n\n\n\n\n\nRibosomal protein L13\n\n\nK02873\n\n\nK02871\n\n\n\n\n\n\nRibosomal protein L14\n\n\nK02875\n\n\nK02874\n\n\n\n\n\n\nRibosomal protein L15\n\n\nK02877\n\n\nK17437\n\n\n\n\n\n\nRibosomal protein L16/L10E\n\n\nK02866\n\n\nK02872\n\n\n\n\n\n\nRibosomal protein L18\n\n\nK02883\n\n\nK02882\n\n\n\n\n\n\nRibosomal protein L22\n\n\nK02891\n\n\nK02890\n\n\n\n\n\n\nRibosomal protein L3\n\n\nK02925\n\n\nK02906\n\n\n\n\n\n\nRibosomal protein L5\n\n\nK02932\n\n\nK02931\n\n\n\n\n\n\nRibosomal protein L6P/L9E\n\n\nK02940\n\n\nK02939\n\n\n\n\n\n\nRibosomal protein S11\n\n\nK02949\n\n\nK02948\n\n\n\n\n\n\nRibosomal protein S15P/S13E\n\n\nK02958\n\n\nK02956\n\n\n\n\n\n\nRibosomal protein S17\n\n\nK02962\n\n\nK02961\n\n\n\n\n\n\nRibosomal protein S2\n\n\nK02981\n\n\nK02967\n\n\n\n\n\n\nRibosomal protein S3\n\n\nK02985\n\n\nK02982\n\n\n\n\n\n\nRibosomal protein S4\n\n\nK02987\n\n\nK02986\n\n\n\n\n\n\nRibosomal protein S5\n\n\nK02989\n\n\nK02988\n\n\n\n\n\n\nRibosomal protein S7\n\n\nK02993\n\n\nK02992\n\n\n\n\n\n\nRibosomal protein S8\n\n\nK02995\n\n\nK02994\n\n\n\n\n\n\nRibosomal protein S9\n\n\nK02997\n\n\nK02996\n\n\n\n\n\n\nSeryl-tRNA synthetase\n\n\nK01875\n\n\nK01875\n\n\n\n\n\n\nArginyl-tRNA synthetase\n\n\nK01887\n\n\nK01887\n\n\n\n\n\n\nDNA-directed RNA polymerase beta subunit\n\n\nK03043\n\n\nK03043\n\n\n\n\n\n\nRibosomal protein S13\n\n\nK02953\n\n\nK02952\n\n\n\n\n\n\n\n\n4. How are SSU rRAN created?\n\n\nThe SSU rRAN sequences are created from the \nSILVA\n database (123.1 release). Sequences haven been truncated, which means unaligned nucleotides are removed.", 
            "title": "FAQ"
        }, 
        {
            "location": "/faq/#1-what-is-the-input-of-physpetree", 
            "text": "Users only need to prepare a TXT file containing  KEGG  abbreviated species names. For example,  organism_example_list .", 
            "title": "1. What is the input of PhySpeTree?"
        }, 
        {
            "location": "/faq/#2-how-to-explain-physpetree-outputs", 
            "text": "PhySpeTree returns two folders,  Outdata  contains the output species tree and  temp  includes temporary data. Files in  temp  can be used to check the quality of outputs in each step. If HCP method ( --hcp ) is selected, the  temp  folder includes:   conserved_protein : highly conserved proteins retrieved from the KEGG database.  alignment : aligned sequences.  concatenate : concatenated sequences and conserved blocks.   If SSU rRNA method ( --srna ) is selected, the  temp  folder includes:   rna_sequence : SSU rRNA sequences retrieved from the SILVA database.  rna_alignment : aligned sequences and conserved blocks.", 
            "title": "2. How to explain PhySpeTree outputs?"
        }, 
        {
            "location": "/faq/#3-what-classes-of-hcp-are-selected", 
            "text": "PhySpeTree uses 31 HCP without horizontal transferred genes according to Ciccarelli  et al. .  cite:   Ciccarelli FD, Doerks T, Von Mering C, et al. Toward automatic reconstruction of a highly resolved tree of life[J]. science, 2006, 311(5765): 1283-1287.   The 31 HCP and corresponding KEGG KO number are shown in the following table:     Protein Names  Eukaryotes KO  Prokaryotes KO      DNA-directed RNA polymerase subunit alpha  K03040  K03040    Ribosomal protein L1  K02865  K02863    Leucyl-tRNA synthetase  K01869  K01869    Metal-dependent proteases with chaperone activity  K01409  K01409    Phenylalanine-tRNA synthethase alpha subunit  K01889  K01889    Predicted GTPase probable translation factor  K06942  K06942    Preprotein translocase subunit SecY  K10956  K10956    Ribosomal protein L11  K02868  K02867    Ribosomal protein L13  K02873  K02871    Ribosomal protein L14  K02875  K02874    Ribosomal protein L15  K02877  K17437    Ribosomal protein L16/L10E  K02866  K02872    Ribosomal protein L18  K02883  K02882    Ribosomal protein L22  K02891  K02890    Ribosomal protein L3  K02925  K02906    Ribosomal protein L5  K02932  K02931    Ribosomal protein L6P/L9E  K02940  K02939    Ribosomal protein S11  K02949  K02948    Ribosomal protein S15P/S13E  K02958  K02956    Ribosomal protein S17  K02962  K02961    Ribosomal protein S2  K02981  K02967    Ribosomal protein S3  K02985  K02982    Ribosomal protein S4  K02987  K02986    Ribosomal protein S5  K02989  K02988    Ribosomal protein S7  K02993  K02992    Ribosomal protein S8  K02995  K02994    Ribosomal protein S9  K02997  K02996    Seryl-tRNA synthetase  K01875  K01875    Arginyl-tRNA synthetase  K01887  K01887    DNA-directed RNA polymerase beta subunit  K03043  K03043    Ribosomal protein S13  K02953  K02952", 
            "title": "3. What classes of HCP are selected?"
        }, 
        {
            "location": "/faq/#4-how-are-ssu-rran-created", 
            "text": "The SSU rRAN sequences are created from the  SILVA  database (123.1 release). Sequences haven been truncated, which means unaligned nucleotides are removed.", 
            "title": "4. How are SSU rRAN created?"
        }
    ]
}